# ANBENNAR: this folder is arranged into the different interface files the GUI elements belong in. For mission/tag-specific GUI, please use zz_mission_content.txt



# The custom guiButtonType/instantTextBoxType/iconType must have a 'scripted = yes' line to work
#custom_button = {
#    name = custom_button_testing #Must match a scripted guiButtonType in a .gui file
#    potential = { } #Determines when the button is visible
#    trigger = { } #Determines when the button is clickable
#    effect = { } #Effect
#    tooltip = localisation_key #Can use customizable localisation
#    frame = {  #Can define multiple frame clauses
#        number = <int> #Which frame to use. Check dds files with multiple icons like icon_religion.dds
#        trigger = { } #First matched frame clause will be used.
#    }
#}

#custom_text_box = {
#    name = custom_text_testing #Must match a scripted instantTextBoxType in a .gui file
#    potential = { } #Determines when the text is visible
#    tooltip = localisation_key #Can use customizable localisation
#    #To localize it, use the name of the button as a key, can also use customizable localisation
#}

#custom_icon = {
#    name = custom_icon_testing #Must match a scripted iconType in a .gui file
#    potential = { } #Determines when the icon is visible
#    tooltip = localisation_key #Can use customizable localisation
#    frame = {  #Can define multiple frame clauses
#        number = <int> #Which frame to use. Check dds files with multiple icons like icon_religion.dds
#        trigger = { } #First matched frame clause will be used.
#    }
#}

#custom_shield = {
#    name = custom_button_testing #Must match a scripted guiButtonType in a .gui file
#    potential = { } #Determines when the shield is visible
#    trigger = { } #Determines when the shield is clickable
#    effect = { } #Effect for clicking
#    tooltip = localisation_key #Can use customizable localisation
#    global_event_target = <string> # Global event target name
#    open_country = <bool> #If clicking opens the country view
#}

##############################  Supported files with scopes ##############################
#   The Gui objects must be directly inside the specified window Gui element!
#   FROM is always the country that clicks
#   provinceview.gui:
#       province_window         (ROOT: Clicked province)
#       buildings_window        (ROOT: Clicked province)
#       state_window            (ROOT: Clicked province)
#   countrycourtview.gui:
#       countrycourtview        (ROOT = FROM)
#   countrygovernmentview.gui:
#       countrygovernmentview   (ROOT = FROM)
#   countrydiplomacyview.gui:
#       countrydiplimacyview    (ROOT: Selected country)
#   countryeconomyview.gui:
#       countryeconomyview      (ROOT = FROM)
#   countrytradeview.gui:
#       countrytradeview        (ROOT = FROM)
#   countrytechnologyview.gui:
#       countrytechnologyview   (ROOT = FROM)
#   countryideasview.gui:
#       countryideasview        (ROOT = FROM)
#   countrymissionsview.gui:
#       countrymissionsview     (ROOT: Selected country)
#   countrydecisionview.gui:
#       countrydecisionsview    (ROOT = FROM)
#   countrystabilityview.gui:
#       countrystabilityview    (ROOT = FROM)
#   countryreligionview.gui:
#       countryreligionview     (ROOT = FROM)
#   countrymilitaryview.gui:
#       countrymilitaryview     (ROOT = FROM)
#   countrysubjectsview.gui:
#       countrysubjectview      (ROOT = FROM)
#   countryestatesview.gui:
#       countryestatesview      (ROOT = FROM)
#   ages_view.gui:
#       ages_view               (ROOT = FROM)
#   tradeinterface.gui:
#       TradeNodeInterface      (ROOT: Trade capital of a trade node)
#   hre.gui:
#       hre_window              (ROOT = FROM)
#   papacy.gui:
#       papacy_window           (ROOT = FROM)
#   faction.gui:
#       All faction windows     (ROOT = FROM)
#   celestialempireview.gui:
#       celestial_window        (ROOT = FROM)
#   countrynativesview.gui:
#       natives_window          (ROOT = FROM)
#   religiousreforms.gui:
#       reforms_window          (ROOT = FROM)
#   parliament.gui:
#       parliament_window       (ROOT = FROM)



custom_window = {
    name = DA_Medicine_Interface
    potential = {
        has_country_flag = DA_Metallurgy_interface_on_Medicine
    }
}
custom_icon = {
    name = DA_Medicine_Interface_icon
    potential = {
        always = yes
    }
}

custom_button = {
	name = DA_Increase_medicine
	tooltip = DA_Increase_medicine_tt
	potential = {
		always = yes
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_Increase_medicine_trigger_tt
            OR = {
                AND = {
                    NOT = { DA_completed.Medicine_1 = yes }
                    check_variable = {
                        which = DA_medicine_exp
                        value = 1000
                    }
                }
                AND = {
                    DA_completed.Medicine_1 = yes
                    NOT = { DA_completed.Medicine_2 = yes }
                    check_variable = {
                        which = DA_medicine_exp
                        value = 2500
                    }
                }
                AND = {
                    DA_completed.Medicine_2 = yes
                    NOT = { DA_completed.Medicine_3 = yes }
                    check_variable = {
                        which = DA_medicine_exp
                        value = 5000
                    }
                }
                AND = {
                    DA_completed.Medicine_3 = yes
                    NOT = { DA_completed.Medicine_4 = yes }
                    check_variable = {
                        which = DA_medicine_exp
                        value = 10000
                    }
                }
            }
        }
        DA_has_NO_Project_active = yes
	}
	effect = {
        add_country_modifier = {
            name = DA_Tech_Researching_Medicine
            duration = -1
        }
        hidden_effect = {
            if = {
                limit = {
                    NOT = { DA_completed.Medicine_1 = yes }
                }
                subtract_variable = {
                    which = DA_medicine_exp
                    value = 1000
                }
                country_event = {
                    id = DA_Tech_Tree_event.100
                    days = 365
                }
            }
            else_if = {
                limit = {
                    DA_completed.Medicine_1 = yes
                    NOT = { DA_completed.Medicine_2 = yes }
                }
                subtract_variable = {
                    which = DA_medicine_exp
                    value = 2500
                }
                country_event = {
                    id = DA_Tech_Tree_event.101
                    days = 365
                }
            }
            else_if = {
                limit = {
                    DA_completed.Medicine_2 = yes
                    NOT = { DA_completed.Medicine_3 = yes }
                }
                subtract_variable = {
                    which = DA_medicine_exp
                    value = 5000
                }
                country_event = {
                    id = DA_Tech_Tree_event.103
                    days = 240
                }
            }
            else_if = {
                limit = {
                    DA_completed.Medicine_3 = yes
                    NOT = { DA_completed.Medicine_4 = yes }
                }
                subtract_variable = {
                    which = DA_medicine_exp
                    value = 10000
                }
                country_event = {
                    id = DA_Tech_Tree_event.106
                    days = 240
                }
            }
        }
	}
}

custom_text_box = {
    name = DA_Tech_Shower.Medicine #Must match a scripted instantTextBoxType in a .gui file
    potential = { always = yes } #Determines when the text is visible
    tooltip = DA_Tech_Shower.Medicine.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Medicine_illness_fighting_efficiency_shower #Must match a scripted instantTextBoxType in a .gui file
    potential = { always = yes } #Determines when the text is visible
    tooltip = DA_Medicine_illness_fighting_efficiency_shower.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Medicine_quarantine_efficiency_shower #Must match a scripted instantTextBoxType in a .gui file
    potential = { always = yes } #Determines when the text is visible
    tooltip = DA_Medicine_quarantine_efficiency_shower.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_button = {
	name = DA_previous_illness_panel_button
	tooltip = DA_previous_illness_panel_button_tt
	potential = {
        always = yes
	}
	trigger = {
        always = yes
	}
	effect = {
        if = {
            limit = {
                NOT = { has_country_flag = DA_Medicine_interface.common_non_magical }
                NOT = { has_country_flag = DA_Medicine_interface.non_common_non_magical }
                NOT = { has_country_flag = DA_Medicine_interface.common_magical }
                NOT = { has_country_flag = DA_Medicine_interface.non_common_magical }
                NOT = { has_country_flag = DA_Medicine_interface.curses }
            }
            set_country_flag = DA_Medicine_interface.common_non_magical
        }
        if = {
            limit = { 
                has_country_flag = DA_Medicine_interface.non_common_non_magical
            }
            clr_country_flag = DA_Medicine_interface.non_common_non_magical
            set_country_flag = DA_Medicine_interface.common_non_magical
        }
        else_if = {
            limit = {
                has_country_flag = DA_Medicine_interface.common_magical
            }
            clr_country_flag = DA_Medicine_interface.common_magical
            set_country_flag = DA_Medicine_interface.non_common_non_magical
        }
        else_if = {
            limit = {
                has_country_flag = DA_Medicine_interface.non_common_magical
            }
            clr_country_flag = DA_Medicine_interface.non_common_magical
            set_country_flag = DA_Medicine_interface.common_magical
        }
        else_if = {
            limit = {
                has_country_flag = DA_Medicine_interface.curses
            }
            clr_country_flag = DA_Medicine_interface.curses
            set_country_flag = DA_Medicine_interface.non_common_magical
        }
	}
}
custom_button = {
	name = DA_next_illness_panel_button
	tooltip = DA_next_illness_panel_button_tt
	potential = {
        always = yes
	}
	trigger = {
        always = yes
	}
	effect = {
        if = {
            limit = {
                NOT = { has_country_flag = DA_Medicine_interface.common_non_magical }
                NOT = { has_country_flag = DA_Medicine_interface.non_common_non_magical }
                NOT = { has_country_flag = DA_Medicine_interface.common_magical }
                NOT = { has_country_flag = DA_Medicine_interface.non_common_magical }
                NOT = { has_country_flag = DA_Medicine_interface.curses }
            }
            set_country_flag = DA_Medicine_interface.common_non_magical
        }
        if = {
            limit = { 
                has_country_flag = DA_Medicine_interface.common_non_magical
            }
            clr_country_flag = DA_Medicine_interface.common_non_magical
            set_country_flag = DA_Medicine_interface.non_common_non_magical
        }
        else_if = {
            limit = {
                has_country_flag = DA_Medicine_interface.non_common_non_magical
            }
            clr_country_flag = DA_Medicine_interface.non_common_non_magical
            set_country_flag = DA_Medicine_interface.common_magical
        }
        else_if = {
            limit = {
                has_country_flag = DA_Medicine_interface.common_magical
            }
            clr_country_flag = DA_Medicine_interface.common_magical
            set_country_flag = DA_Medicine_interface.non_common_magical
        }
        else_if = {
            limit = {
                has_country_flag = DA_Medicine_interface.common_magical
            }
            clr_country_flag = DA_Medicine_interface.common_magical
            set_country_flag = DA_Medicine_interface.curses
        }
	}
}

custom_button = {
	name = DA_Medicine_food_policy_button
	tooltip = DA_Medicine_food_policy_button_tt
	potential = {
        always = yes
	}
	trigger = {
        always = yes
	}
	effect = {
        #disease effect here
	}
}
custom_button = {
	name = DA_Medicine_health_policy_button
	tooltip = DA_Medicine_health_policy_button_tt
	potential = {
        always = yes
	}
	trigger = {
        always = yes
	}
	effect = {
        #disease effect here
	}
}


#illnesses from here

custom_window = {
    name = DA_Medicine_Interface_common_non_magical
    potential = {
        has_country_flag = DA_Metallurgy_interface_on_Medicine
        has_country_flag = DA_Medicine_interface.common_non_magical
    }
}
custom_window = {
    name = DA_Medicine_Interface_non_common_non_magical
    potential = {
        has_country_flag = DA_Metallurgy_interface_on_Medicine
        has_country_flag = DA_Medicine_interface.non_common_non_magical
    }
}
custom_window = {
    name = DA_Medicine_Interface_common_magical
    potential = {
        has_country_flag = DA_Metallurgy_interface_on_Medicine
        has_country_flag = DA_Medicine_interface.common_magical
    }
}
custom_window = {
    name = DA_Medicine_Interface_non_common_magical
    potential = {
        has_country_flag = DA_Metallurgy_interface_on_Medicine
        has_country_flag = DA_Medicine_interface.non_common_magical
    }
}
custom_window = {
    name = DA_Medicine_Interface_curses
    potential = {
        has_country_flag = DA_Metallurgy_interface_on_Medicine
        has_country_flag = DA_Medicine_interface.curses
    }
}

# illness Marsh_Fever

custom_window = {
    name = DA_Medicine_Interface_disease_1_1
    potential = {
        has_country_flag = DA_Metallurgy_interface_on_Medicine
        has_country_flag = DA_Medicine_interface.common_non_magical
    }
}
custom_button = {
	name = DA_disease_1_1_shower
	tooltip = DA_Disease.Marsh_Fever
	potential = {
        always = yes
	}
	trigger = {
        always = yes
	}
	effect = {
        custom_tooltip = DA_fake_illness_modifier_shower_tt
        tooltip = {
            capital_scope = {
                add_permanent_province_modifier = {
                    name = DA_Disease.Marsh_Fever
                    duration = -1
                }
            }
        }
        #disease effect here
	}
}
custom_button = {
	name = DA_disease_1_1_burn_button
	tooltip = DA_disease_burn_button_tt
	potential = {
        always = yes
	}
	trigger = {
        any_owned_province = {
            has_province_modifier = DA_Disease.Marsh_Fever
            NOT = { has_province_modifier = DA_Medicine.Burning_province }
        }
	}
	effect = {
        custom_tooltip = DA_every_owned_infected_province_will_get_this_tt
        tooltip = {
            random_owned_province = {
                add_base_tax = -1
                add_base_production = -2
                add_base_manpower = -3
                add_devastation = 25
                add_unrest = 20
                add_permanent_province_modifier = {
                    name = DA_Medicine.Burning_province
                    duration = 1825
                }
                custom_tooltip = DA_illness_will_be_deleted_in_60_to_790_days
                hidden_effect = {
                    province_event = {
                        id = DA_Tech_Medicine_event.1
                        days = 60
                        random = 730
                    }
                }
            }
        }
        hidden_effect = {
            every_owned_province = {
                limit = {
                    has_province_modifier = DA_Disease.Marsh_Fever
                    NOT = { has_province_modifier = DA_Medicine.Burning_province }
                }
                add_base_tax = -1
                add_base_production = -2
                add_base_manpower = -3
                add_devastation = 25
                add_unrest = 20
                add_permanent_province_modifier = {
                    name = DA_Medicine.Burning_province
                    duration = 1825
                }
                custom_tooltip = DA_illness_will_be_deleted_in_60_to_790_days
                hidden_effect = {
                    province_event = {
                        id = DA_Tech_Medicine_event.1
                        days = 60
                        random = 730
                    }
                }
            }
        }
	}
}
custom_button = {
	name = DA_disease_1_1_cure_button
	tooltip = DA_disease_cure_button_tt
	potential = {
        always = yes
	}
	trigger = {
        any_owned_province = {
            has_province_modifier = DA_Disease.Marsh_Fever
        }
        if = {
            limit = {
                DA_researched_illness_Marsh_Fever = no
            }
            DA_alchemy_reagents_total_required = {
                amount = 5
            }
            adm_power = 50
            NOT = { has_country_modifier = DA_Medicine.illness_research }
            any_owned_province = {
                has_province_modifier = DA_Disease.Marsh_Fever
            }
        }
        else_if = {
            limit = {
                DA_researched_illness_Marsh_Fever = yes
            }
            treasury = 10
            any_owned_province = {
                has_province_modifier = DA_Disease.Marsh_Fever
            }
        }
	}
	effect = {
        if = {
            limit = {
                DA_researched_illness_Marsh_Fever = yes
            }
            every_owned_province = {
                limit = {
                    has_province_modifier = DA_Disease.Marsh_Fever
                }
                owner = {
                    add_treasury = -10
                }
                remove_province_modifier = DA_Disease.Marsh_Fever
            }
        }
        else_if = {
            limit = {
                DA_researched_illness_Marsh_Fever = no
            }
            DA_alchemy_reagents_spend = {
                amount = 5
            }
            add_adm_power = -50
            add_country_modifier = {
                name = DA_Medicine.illness_research
                duration = -1
            }
            # make this the research finished event
            country_event = {
                id = DA_Tech_Medicine_event.1000
                days = 730
                random = 365
            }
        }
	}
}
custom_button = {
	name = DA_disease_1_1_poison_button
	tooltip = DA_disease_poison_button_tt
	potential = {
        always = yes
	}
	trigger = {
        has_idea = DA_Medicine_ideas6
        DA_researched_illness_Marsh_Fever = yes
        any_rival_country = {
            has_spy_network_from = {
                who = FROM
                value = 25
            }
        }
	}
	effect = {
        random_rival_country = {
            limit = {
                has_spy_network_from = {
                    who = FROM
                    value = 25
                }
            }
            add_spy_network_from = {
                who = FROM
                value = -25
            }
            capital_scope = {
                province_event = {
                    id = DA_Tech_Medicine_event.100
                }
                hidden_effect = {
                    if = {
                        limit = {
                            ai = yes
                        }
                        add_base_tax = -1
                        add_base_production = -2
                        add_base_manpower = -3
                        add_devastation = 25
                        add_unrest = 20
                        add_permanent_province_modifier = {
                            name = DA_Medicine.Burning_province
                            duration = 1825
                        }
                        province_event = {
                            id = DA_Tech_Medicine_event.1
                            days = 60
                            random = 730
                        }
                    }
                }
            }
        }
	}
}
custom_button = {
	name = DA_disease_1_1_quarantine_locked_strip
	tooltip = DA_disease_quarantine_locked_strip_tt
    
    frame = {
        number = 1
        trigger = {
            check_variable = {
                which = DA_quarantine_efficiency
                value = 10
            }
            any_owned_province = {
			    has_province_modifier = DA_Disease.Marsh_Fever
			    has_province_modifier = DA_Medicine.Quarantined_province
            }
        } 
    }
    frame = {
        number = 2
        trigger = {
            NOT = {
                check_variable = {
                    which = DA_quarantine_efficiency
                    value = 10
                }
            }
            any_owned_province = {
			    has_province_modifier = DA_Disease.Marsh_Fever
                has_province_modifier = DA_Medicine.Quarantined_province
            }
        } 
    }
    frame = {
        number = 3
        trigger = {
            any_owned_province = {
			    has_province_modifier = DA_Disease.Marsh_Fever
                NOT = { has_province_modifier = DA_Medicine.Quarantined_province }
            }
        } 
    }
    frame = {
        number = 4
        trigger = {
            all_owned_province = {
                NOT = { has_province_modifier = DA_Disease.Marsh_Fever }
            }
        } 
    }
	potential = {
        always = yes
	}
	trigger = {
        any_owned_province = {
		    has_province_modifier = DA_Disease.Marsh_Fever
            NOT = { has_province_modifier = DA_Medicine.Quarantined_province }
        }
	}
	effect = {
        custom_tooltip = DA_medicine_quarantine_every_province_with_this_illness_tt
        every_owned_province = {
            limit = {
                has_province_modifier = DA_Disease.Marsh_Fever
                NOT = { has_province_modifier = DA_Medicine.Quarantined_province }
            }
            add_province_modifier = {
                name = DA_Medicine.Quarantined_province
                duration = -1
            }
        }
	}
}
