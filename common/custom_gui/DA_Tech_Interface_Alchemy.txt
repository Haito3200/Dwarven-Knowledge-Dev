# ANBENNAR: this folder is arranged into the different interface files the GUI elements belong in. For mission/tag-specific GUI, please use zz_mission_content.txt



# The custom guiButtonType/instantTextBoxType/iconType must have a 'scripted = yes' line to work
#custom_button = {
#    name = custom_button_testing #Must match a scripted guiButtonType in a .gui file
#    potential = { } #Determines when the button is visible
#    trigger = { } #Determines when the button is clickable
#    effect = { } #Effect
#    tooltip = localisation_key #Can use customizable localisation
#    frame = {  #Can define multiple frame clauses
#        number = <int> #Which frame to use. Check dds files with multiple icons like icon_religion.dds
#        trigger = { } #First matched frame clause will be used.
#    }
#}

#custom_text_box = {
#    name = custom_text_testing #Must match a scripted instantTextBoxType in a .gui file
#    potential = { } #Determines when the text is visible
#    tooltip = localisation_key #Can use customizable localisation
#    #To localize it, use the name of the button as a key, can also use customizable localisation
#}

#custom_icon = {
#    name = custom_icon_testing #Must match a scripted iconType in a .gui file
#    potential = { } #Determines when the icon is visible
#    tooltip = localisation_key #Can use customizable localisation
#    frame = {  #Can define multiple frame clauses
#        number = <int> #Which frame to use. Check dds files with multiple icons like icon_religion.dds
#        trigger = { } #First matched frame clause will be used.
#    }
#}

#custom_shield = {
#    name = custom_button_testing #Must match a scripted guiButtonType in a .gui file
#    potential = { } #Determines when the shield is visible
#    trigger = { } #Determines when the shield is clickable
#    effect = { } #Effect for clicking
#    tooltip = localisation_key #Can use customizable localisation
#    global_event_target = <string> # Global event target name
#    open_country = <bool> #If clicking opens the country view
#}

##############################  Supported files with scopes ##############################
#   The Gui objects must be directly inside the specified window Gui element!
#   FROM is always the country that clicks
#   provinceview.gui:
#       province_window         (ROOT: Clicked province)
#       buildings_window        (ROOT: Clicked province)
#       state_window            (ROOT: Clicked province)
#   countrycourtview.gui:
#       countrycourtview        (ROOT = FROM)
#   countrygovernmentview.gui:
#       countrygovernmentview   (ROOT = FROM)
#   countrydiplomacyview.gui:
#       countrydiplimacyview    (ROOT: Selected country)
#   countryeconomyview.gui:
#       countryeconomyview      (ROOT = FROM)
#   countrytradeview.gui:
#       countrytradeview        (ROOT = FROM)
#   countrytechnologyview.gui:
#       countrytechnologyview   (ROOT = FROM)
#   countryideasview.gui:
#       countryideasview        (ROOT = FROM)
#   countrymissionsview.gui:
#       countrymissionsview     (ROOT: Selected country)
#   countrydecisionview.gui:
#       countrydecisionsview    (ROOT = FROM)
#   countrystabilityview.gui:
#       countrystabilityview    (ROOT = FROM)
#   countryreligionview.gui:
#       countryreligionview     (ROOT = FROM)
#   countrymilitaryview.gui:
#       countrymilitaryview     (ROOT = FROM)
#   countrysubjectsview.gui:
#       countrysubjectview      (ROOT = FROM)
#   countryestatesview.gui:
#       countryestatesview      (ROOT = FROM)
#   ages_view.gui:
#       ages_view               (ROOT = FROM)
#   tradeinterface.gui:
#       TradeNodeInterface      (ROOT: Trade capital of a trade node)
#   hre.gui:
#       hre_window              (ROOT = FROM)
#   papacy.gui:
#       papacy_window           (ROOT = FROM)
#   faction.gui:
#       All faction windows     (ROOT = FROM)
#   celestialempireview.gui:
#       celestial_window        (ROOT = FROM)
#   countrynativesview.gui:
#       natives_window          (ROOT = FROM)
#   religiousreforms.gui:
#       reforms_window          (ROOT = FROM)
#   parliament.gui:
#       parliament_window       (ROOT = FROM)



custom_window = {
    name = DA_Alchemy_Interface
    potential = {
        has_country_flag = DA_Metallurgy_interface_on_Alchemy
    }
}
custom_icon = {
    name = DA_Alchemy_Interface_icon
    potential = {
        has_country_flag = DA_Metallurgy_interface_on_Alchemy
    }
}
custom_button = {
	name = DA_Increase_alchemy
	tooltip = DA_Increase_alchemy_tt
	potential = {
		has_country_flag = DA_Metallurgy_interface_on_Alchemy
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_Increase_alchemy_trigger_tt
            OR = {
                AND = {
                    NOT = { DA_completed.Alchemy_1 = yes }
                    check_variable = {
                        which = DA_alchemy_exp
                        value = 1000
                    }
                }
                AND = {
                    DA_completed.Alchemy_1 = yes
                    NOT = { DA_completed.Alchemy_2 = yes }
                    check_variable = {
                        which = DA_alchemy_exp
                        value = 2500
                    }
                }
                AND = {
                    DA_completed.Alchemy_2 = yes
                    NOT = { DA_completed.Alchemy_3 = yes }
                    check_variable = {
                        which = DA_alchemy_exp
                        value = 5000
                    }
                }
                AND = {
                    DA_completed.Alchemy_3 = yes
                    NOT = { DA_completed.Alchemy_4 = yes }
                    check_variable = {
                        which = DA_alchemy_exp
                        value = 10000
                    }
                }
            }
        }
        DA_has_NO_Project_active = yes
	}
	effect = {
        add_country_modifier = {
            name = DA_Tech_Researching_Alchemy
            duration = -1
        }
        hidden_effect = {
            if = {
                limit = {
                    NOT = { DA_completed.Alchemy_1 = yes }
                }
                subtract_variable = {
                    which = DA_alchemy_exp
                    value = 1000
                }
                country_event = {
                    id = DA_Tech_Tree_event.200
                    days = 365
                }
            }
            else_if = {
                limit = {
                    DA_completed.Alchemy_1 = yes
                    NOT = { DA_completed.Alchemy_2 = yes }
                }
                subtract_variable = {
                    which = DA_alchemy_exp
                    value = 2500
                }
                country_event = {
                    id = DA_Tech_Tree_event.201
                    days = 365
                }
            }
            else_if = {
                limit = {
                    DA_completed.Alchemy_2 = yes
                    NOT = { DA_completed.Alchemy_3 = yes }
                }
                subtract_variable = {
                    which = DA_alchemy_exp
                    value = 5000
                }
                country_event = {
                    id = DA_Tech_Tree_event.203
                    days = 240
                }
            }
            else_if = {
                limit = {
                    DA_completed.Alchemy_3 = yes
                    NOT = { DA_completed.Alchemy_4 = yes }
                }
                subtract_variable = {
                    which = DA_alchemy_exp
                    value = 10000
                }
                country_event = {
                    id = DA_Tech_Tree_event.206
                    days = 240
                }
            }
        }
	}
}

custom_text_box = {
    name = DA_Tech_Shower.Alchemy #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_Alchemy } #Determines when the text is visible
    tooltip = DA_Tech_Shower.Alchemy.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_button = {
	name = DA_Alchemy_big_image_button
	tooltip = DA_Alchemy_big_image_button_tt
	potential = {
        always = yes
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_in_development
            always = no
        }
	}
	effect = {
	}
}
custom_button = {
	name = DA_Alchemy_Reagent_Selection_button_1
	tooltip = DA_Alchemy_Reagent_Selection_button_1_tt
	potential = {
        always = yes
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_in_development
            always = no
        }
	}
	effect = {
	}
}
custom_button = {
	name = DA_Alchemy_Reagent_Selection_button_2
	tooltip = DA_Alchemy_Reagent_Selection_button_2_tt
	potential = {
        always = yes
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_in_development
            always = no
        }
	}
	effect = {
	}
}
custom_button = {
	name = DA_Alchemy_Reagent_Selection_button_3
	tooltip = DA_Alchemy_Reagent_Selection_button_3_tt
	potential = {
        always = yes
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_in_development
            always = no
        }
	}
	effect = {
	}
}
custom_button = {
	name = DA_Alchemy_Reagent_Selection_button_4
	tooltip = DA_Alchemy_Reagent_Selection_button_4_tt
	potential = {
        always = yes
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_in_development
            always = no
        }
	}
	effect = {
	}
}
custom_button = {
	name = DA_Alchemy_Final_button
	tooltip = DA_Alchemy_Final_button_tt
	potential = {
        always = yes
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_in_development
            always = no
        }
	}
	effect = {
	}
}
custom_button = {
	name = DA_Alchemy_reset_button
	tooltip = DA_Alchemy_reset_button_tt
	potential = {
        always = yes
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_in_development
            always = no
        }
	}
	effect = {
	}
}