# ANBENNAR: this folder is arranged into the different interface files the GUI elements belong in. For mission/tag-specific GUI, please use zz_mission_content.txt



# The custom guiButtonType/instantTextBoxType/iconType must have a 'scripted = yes' line to work
#custom_button = {
#    name = custom_button_testing #Must match a scripted guiButtonType in a .gui file
#    potential = { } #Determines when the button is visible
#    trigger = { } #Determines when the button is clickable
#    effect = { } #Effect
#    tooltip = localisation_key #Can use customizable localisation
#    frame = {  #Can define multiple frame clauses
#        number = <int> #Which frame to use. Check dds files with multiple icons like icon_religion.dds
#        trigger = { } #First matched frame clause will be used.
#    }
#}

#custom_text_box = {
#    name = custom_text_testing #Must match a scripted instantTextBoxType in a .gui file
#    potential = { } #Determines when the text is visible
#    tooltip = localisation_key #Can use customizable localisation
#    #To localize it, use the name of the button as a key, can also use customizable localisation
#}

#custom_icon = {
#    name = custom_icon_testing #Must match a scripted iconType in a .gui file
#    potential = { } #Determines when the icon is visible
#    tooltip = localisation_key #Can use customizable localisation
#    frame = {  #Can define multiple frame clauses
#        number = <int> #Which frame to use. Check dds files with multiple icons like icon_religion.dds
#        trigger = { } #First matched frame clause will be used.
#    }
#}

#custom_shield = {
#    name = custom_button_testing #Must match a scripted guiButtonType in a .gui file
#    potential = { } #Determines when the shield is visible
#    trigger = { } #Determines when the shield is clickable
#    effect = { } #Effect for clicking
#    tooltip = localisation_key #Can use customizable localisation
#    global_event_target = <string> # Global event target name
#    open_country = <bool> #If clicking opens the country view
#}

##############################  Supported files with scopes ##############################
#   The Gui objects must be directly inside the specified window Gui element!
#   FROM is always the country that clicks
#   provinceview.gui:
#       province_window         (ROOT: Clicked province)
#       buildings_window        (ROOT: Clicked province)
#       state_window            (ROOT: Clicked province)
#   countrycourtview.gui:
#       countrycourtview        (ROOT = FROM)
#   countrygovernmentview.gui:
#       countrygovernmentview   (ROOT = FROM)
#   countrydiplomacyview.gui:
#       countrydiplimacyview    (ROOT: Selected country)
#   countryeconomyview.gui:
#       countryeconomyview      (ROOT = FROM)
#   countrytradeview.gui:
#       countrytradeview        (ROOT = FROM)
#   countrytechnologyview.gui:
#       countrytechnologyview   (ROOT = FROM)
#   countryideasview.gui:
#       countryideasview        (ROOT = FROM)
#   countrymissionsview.gui:
#       countrymissionsview     (ROOT: Selected country)
#   countrydecisionview.gui:
#       countrydecisionsview    (ROOT = FROM)
#   countrystabilityview.gui:
#       countrystabilityview    (ROOT = FROM)
#   countryreligionview.gui:
#       countryreligionview     (ROOT = FROM)
#   countrymilitaryview.gui:
#       countrymilitaryview     (ROOT = FROM)
#   countrysubjectsview.gui:
#       countrysubjectview      (ROOT = FROM)
#   countryestatesview.gui:
#       countryestatesview      (ROOT = FROM)
#   ages_view.gui:
#       ages_view               (ROOT = FROM)
#   tradeinterface.gui:
#       TradeNodeInterface      (ROOT: Trade capital of a trade node)
#   hre.gui:
#       hre_window              (ROOT = FROM)
#   papacy.gui:
#       papacy_window           (ROOT = FROM)
#   faction.gui:
#       All faction windows     (ROOT = FROM)
#   celestialempireview.gui:
#       celestial_window        (ROOT = FROM)
#   countrynativesview.gui:
#       natives_window          (ROOT = FROM)
#   religiousreforms.gui:
#       reforms_window          (ROOT = FROM)
#   parliament.gui:
#       parliament_window       (ROOT = FROM)


#TODO Jothell delete
# custom_icon = {
#     name = DA_topbar_addons_background
#     potential = {
#         always = yes
#     }
# }
custom_button = {
	name = DA_access_metallurgy_menu_button
	tooltip = DA_open_metallurgy_interface_decision_title
	potential = {
		always = yes
	}
	trigger = {
        # custom_trigger_tooltip = {
            # tooltip = DA_metallurgy_interface_NOT_IN_USE
        hidden_trigger = {
            always = yes
        }
	}
	effect = {
        hidden_effect = {
            DA_initialise_interface_variables = yes
            if = {
                limit = {
                    has_country_flag = DA_Metallurgy_interface_on
                }
                clr_country_flag = DA_Metallurgy_interface_on
                clr_country_flag = DA_Metallurgy_interface_on_main
                clr_country_flag = DA_Metallurgy_interface_on_alloy
                clr_country_flag = DA_Metallurgy_interface_on_Alchemy
                clr_country_flag = DA_Metallurgy_interface_on_Arcane_Arts
                clr_country_flag = DA_Metallurgy_interface_on_Mechanics
                clr_country_flag = DA_Metallurgy_interface_on_Medicine

                clr_country_flag = DA_Metallurgy_interface_on_inventions
                clr_country_flag = DA_Metallurgy_interface_on_research_facility
                clr_country_flag = DA_Metallurgy_interface_on_wonders
            }
            else = {
                set_country_flag = DA_Metallurgy_interface_on
                set_country_flag = DA_Metallurgy_interface_on_main
            }
        }
	}
}
custom_button = {
	name = DA_access_Black_Market_button
	tooltip = DA_access_Black_Market_button_tt
	potential = {
		always = yes
	}
	trigger = {
        hidden_trigger = {
            always = yes
        }
	}
	effect = {      
        custom_tooltip = DA_in_development
        # this is just to prevent people opening an half-done thing
    #    if = {
    #        limit = {
    #            has_country_flag = DA_Black_Market_Interface_on
    #        }
    #        clr_country_flag = DA_Black_Market_Interface_on
    #    }
    #    else = {
    #        set_country_flag = DA_Black_Market_Interface_on
    #    }
	}
}
custom_button = {
	name = DA_access_Dwarovar_Wonders_button
	tooltip = DA_access_Dwarovar_Wonders_button_tt
	potential = {
		always = yes
	}
	trigger = {
        hidden_trigger = {
            always = yes
        }
	}
	effect = {
        if = {
            limit = {
                culture_group = dwarven
            }
            DA_initialise_interface_variables = yes
            clr_country_flag = DA_Metallurgy_interface_on_main
            clr_country_flag = DA_Metallurgy_interface_on_alloy
            clr_country_flag = DA_Metallurgy_interface_on_Alchemy
            clr_country_flag = DA_Metallurgy_interface_on_Arcane_Arts
            clr_country_flag = DA_Metallurgy_interface_on_Mechanics
            clr_country_flag = DA_Metallurgy_interface_on_Medicine

            clr_country_flag = DA_Metallurgy_interface_on_inventions
            clr_country_flag = DA_Metallurgy_interface_on_research_facility

            set_country_flag = DA_Metallurgy_interface_on
            set_country_flag = DA_Metallurgy_interface_on_wonders
        }
        else = {
            custom_tooltip = DA_custure_group_must_be_dwarven_tt
        }
	}
}
custom_window = {
    name = DA_Metallurgy_interface
    potential = {
        has_country_flag = DA_Metallurgy_interface_on
    }
}
custom_icon = {
    name = DA_Metallurgy_interface_main
    potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
    }
       # frame = {  #Can define multiple frame clauses
           # number = 1 #Which frame to use. Check dds files with multiple icons like icon_religion.dds
            #trigger = {
               # has_country_flag = DA_Metallurgy_interface_on_main
            #} #First matched frame clause will be used.
      #  }
}
custom_button = {
	name = DA_close_button_main
	tooltip = "Close"
	potential = {
		always = yes
	}
	trigger = {
		always = yes
	}
	effect = {
        clr_country_flag = DA_Metallurgy_interface_on
        
        clr_country_flag = DA_Metallurgy_interface_on_wonders
        clr_country_flag = DA_Metallurgy_interface_on_inventions
        clr_country_flag = DA_Metallurgy_interface_on_research_facility

        clr_country_flag = DA_Metallurgy_interface_on_main
        clr_country_flag = DA_Metallurgy_interface_on_alloy
        clr_country_flag = DA_Metallurgy_interface_on_Alchemy
        clr_country_flag = DA_Metallurgy_interface_on_Arcane_Arts
        clr_country_flag = DA_Metallurgy_interface_on_Mechanics
        clr_country_flag = DA_Metallurgy_interface_on_Medicine
	}
}
custom_button = {
	name = DA_switch_button_main
	tooltip = DA_switch_to_metallurgy_interface_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
	}
	trigger = {
		always = yes
	}
	effect = {
        DA_initialise_interface_variables = yes
        clr_country_flag = DA_Metallurgy_interface_on_alloy
        clr_country_flag = DA_Metallurgy_interface_on_Mechanics
        clr_country_flag = DA_Metallurgy_interface_on_Alchemy
        clr_country_flag = DA_Metallurgy_interface_on_Arcane_Arts
        clr_country_flag = DA_Metallurgy_interface_on_Medicine
        
        clr_country_flag = DA_Metallurgy_interface_on_wonders
        clr_country_flag = DA_Metallurgy_interface_on_inventions
        clr_country_flag = DA_Metallurgy_interface_on_research_facility
        
        set_country_flag = DA_Metallurgy_interface_on_main
	}
}
custom_button = {
	name = DA_metallurgy_level_up_alert
	tooltip = DA_technology_level_up_alert_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
        custom_trigger_tooltip = {
            tooltip = DA_Increase_metallurgy_trigger_tt
            OR = {
                AND = {
                    NOT = { DA_completed.Metallurgy_1 = yes }
                    check_variable = {
                        which = DA_metallurgy_exp
                        value = 1000
                    }
                }
                AND = {
                    DA_completed.Metallurgy_1 = yes
                    NOT = { DA_completed.Metallurgy_2 = yes }
                    check_variable = {
                        which = DA_metallurgy_exp
                        value = 2500
                    }
                }
                AND = {
                    DA_completed.Metallurgy_2 = yes
                    NOT = { DA_completed.Metallurgy_3 = yes }
                    check_variable = {
                        which = DA_metallurgy_exp
                        value = 5000
                    }
                }
                AND = {
                    DA_completed.Metallurgy_3 = yes
                    NOT = { DA_completed.Metallurgy_4 = yes }
                    check_variable = {
                        which = DA_metallurgy_exp
                        value = 10000
                    }
                }
            }
        }
        DA_has_NO_Project_active = yes
	}
	trigger = {
        hidden_trigger = {
		    always = yes
        }
	}
	effect = {
	}
}
custom_button = {
	name = DA_switch_button_alloy
	tooltip = DA_switch_to_alloy_interface_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
	}
	trigger = {
		always = yes
	}
	effect = {
        clr_country_flag = DA_Metallurgy_interface_on_main
        clr_country_flag = DA_Metallurgy_interface_on_Mechanics
        clr_country_flag = DA_Metallurgy_interface_on_Alchemy
        clr_country_flag = DA_Metallurgy_interface_on_Arcane_Arts
        clr_country_flag = DA_Metallurgy_interface_on_Medicine
        
        clr_country_flag = DA_Metallurgy_interface_on_wonders
        clr_country_flag = DA_Metallurgy_interface_on_inventions
        clr_country_flag = DA_Metallurgy_interface_on_research_facility

        set_country_flag = DA_Metallurgy_interface_on_alloy
        hidden_effect = {
            export_to_variable = {
                value = modifier:DA_fake_alloy_common_slot_adder
                variable_name = DA_alloy_common_slots
            }
            export_to_variable = {
                value = modifier:DA_fake_alloy_rare_slot_adder
                variable_name = DA_alloy_rare_slots
            }
            export_to_variable = {
                value = modifier:DA_fake_alloy_legendary_slot_adder
                variable_name = DA_alloy_legendary_slots
            }
        }
	}
}
custom_button = {
	name = DA_switch_button_Arcane_Arts
	tooltip = DA_switch_button_Arcane_Arts_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
	}
	trigger = {
		always = yes
	}
	effect = {
        clr_country_flag = DA_Metallurgy_interface_on_main
        clr_country_flag = DA_Metallurgy_interface_on_alloy
        clr_country_flag = DA_Metallurgy_interface_on_Mechanics
        clr_country_flag = DA_Metallurgy_interface_on_Alchemy
        clr_country_flag = DA_Metallurgy_interface_on_Medicine
        
        clr_country_flag = DA_Metallurgy_interface_on_wonders
        clr_country_flag = DA_Metallurgy_interface_on_inventions
        clr_country_flag = DA_Metallurgy_interface_on_research_facility

        set_country_flag = DA_Metallurgy_interface_on_Arcane_Arts
        hidden_effect = {
            export_to_variable = {
                value = modifier:DA_fake_alloy_common_slot_adder
                variable_name = DA_alloy_common_slots
            }
            export_to_variable = {
                value = modifier:DA_fake_alloy_rare_slot_adder
                variable_name = DA_alloy_rare_slots
            }
            export_to_variable = {
                value = modifier:DA_fake_alloy_legendary_slot_adder
                variable_name = DA_alloy_legendary_slots
            }
        }
	}
}
custom_button = {
	name = DA_Arcane_Arts_level_up_alert
	tooltip = DA_technology_level_up_alert_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
        custom_trigger_tooltip = {
            tooltip = DA_Increase_magic_theory_trigger_tt
            OR = {
                AND = {
                    NOT = { DA_completed.Magic_Theory_1 = yes }
                    check_variable = {
                        which = DA_acane_arts_exp
                        value = 1000
                    }
                }
                AND = {
                    DA_completed.Magic_Theory_1 = yes
                    NOT = { DA_completed.Magic_Theory_2 = yes }
                    check_variable = {
                        which = DA_acane_arts_exp
                        value = 2500
                    }
                }
                AND = {
                    DA_completed.Magic_Theory_2 = yes
                    DA_completed.Elemental_Magic_Air = yes
                    DA_completed.Elemental_Magic_Fire = yes
                    DA_completed.Elemental_Magic_Water = yes
                    DA_completed.Elemental_Magic_Earth = yes
                    NOT = { DA_completed.Magic_Theory_3 = yes }
                    check_variable = {
                        which = DA_acane_arts_exp
                        value = 5000
                    }
                }
                AND = {
                    DA_completed.Magic_Theory_3 = yes
                    NOT = { DA_completed.Magic_Theory_4 = yes }
                    check_variable = {
                        which = DA_acane_arts_exp
                        value = 10000
                    }
                }
            }
        }
        DA_has_NO_Project_active = yes
	}
	trigger = {
        hidden_trigger = {
		    always = yes
        }
	}
	effect = {
	}
}
custom_button = {
	name = DA_switch_button_Mechanics
	tooltip = DA_switch_button_Mechanics_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
	}
	trigger = {
		always = yes
	}
	effect = {
        clr_country_flag = DA_Metallurgy_interface_on_main
        clr_country_flag = DA_Metallurgy_interface_on_alloy
        clr_country_flag = DA_Metallurgy_interface_on_Alchemy
        clr_country_flag = DA_Metallurgy_interface_on_Arcane_Arts
        clr_country_flag = DA_Metallurgy_interface_on_Medicine

        clr_country_flag = DA_Metallurgy_interface_on_wonders
        clr_country_flag = DA_Metallurgy_interface_on_inventions
        clr_country_flag = DA_Metallurgy_interface_on_research_facility

        set_country_flag = DA_Metallurgy_interface_on_Mechanics
        hidden_effect = {
            export_to_variable = {
                value = modifier:DA_fake_alloy_common_slot_adder
                variable_name = DA_alloy_common_slots
            }
            export_to_variable = {
                value = modifier:DA_fake_alloy_rare_slot_adder
                variable_name = DA_alloy_rare_slots
            }
            export_to_variable = {
                value = modifier:DA_fake_alloy_legendary_slot_adder
                variable_name = DA_alloy_legendary_slots
            }
        }
	}
}
custom_button = {
	name = DA_Mechanics_level_up_alert
	tooltip = DA_technology_level_up_alert_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
        custom_trigger_tooltip = {
            tooltip = DA_Increase_mechanics_trigger_tt
            OR = {
                AND = {
                    NOT = { DA_completed.Mechanics_1 = yes }
                    check_variable = {
                        which = DA_mechanics_exp
                        value = 1000
                    }
                }
                AND = {
                    DA_completed.Mechanics_1 = yes
                    NOT = { DA_completed.Mechanics_2 = yes }
                    check_variable = {
                        which = DA_mechanics_exp
                        value = 2500
                    }
                }
                AND = {
                    DA_completed.Mechanics_2 = yes
                    NOT = { DA_completed.Mechanics_3 = yes }
                    check_variable = {
                        which = DA_mechanics_exp
                        value = 5000
                    }
                }
                AND = {
                    DA_completed.Mechanics_3 = yes
                    NOT = { DA_completed.Mechanics_4 = yes }
                    check_variable = {
                        which = DA_mechanics_exp
                        value = 10000
                    }
                }
            }
        }
        DA_has_NO_Project_active = yes
	}
	trigger = {
        hidden_trigger = {
		    always = yes
        }
	}
	effect = {
	}
}
custom_button = {
	name = DA_switch_button_Alchemy
	tooltip = DA_switch_button_Alchemy_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
	}
	trigger = {
		always = yes
	}
	effect = {
        clr_country_flag = DA_Metallurgy_interface_on_main
        clr_country_flag = DA_Metallurgy_interface_on_alloy
        clr_country_flag = DA_Metallurgy_interface_on_Arcane_Arts
        clr_country_flag = DA_Metallurgy_interface_on_Mechanics
        clr_country_flag = DA_Metallurgy_interface_on_Medicine

        clr_country_flag = DA_Metallurgy_interface_on_wonders
        clr_country_flag = DA_Metallurgy_interface_on_inventions
        clr_country_flag = DA_Metallurgy_interface_on_research_facility

        set_country_flag = DA_Metallurgy_interface_on_Alchemy
        hidden_effect = {
            export_to_variable = {
                value = modifier:DA_fake_alloy_common_slot_adder
                variable_name = DA_alloy_common_slots
            }
            export_to_variable = {
                value = modifier:DA_fake_alloy_rare_slot_adder
                variable_name = DA_alloy_rare_slots
            }
            export_to_variable = {
                value = modifier:DA_fake_alloy_legendary_slot_adder
                variable_name = DA_alloy_legendary_slots
            }
        }
	}
}
custom_button = {
	name = DA_Alchemy_level_up_alert
	tooltip = DA_technology_level_up_alert_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
        custom_trigger_tooltip = {
            tooltip = DA_Increase_alchemy_trigger_tt
            OR = {
                AND = {
                    NOT = { DA_completed.Alchemy_1 = yes }
                    check_variable = {
                        which = DA_alchemy_exp
                        value = 1000
                    }
                }
                AND = {
                    DA_completed.Alchemy_1 = yes
                    NOT = { DA_completed.Alchemy_2 = yes }
                    check_variable = {
                        which = DA_alchemy_exp
                        value = 2500
                    }
                }
                AND = {
                    DA_completed.Alchemy_2 = yes
                    NOT = { DA_completed.Alchemy_3 = yes }
                    check_variable = {
                        which = DA_alchemy_exp
                        value = 5000
                    }
                }
                AND = {
                    DA_completed.Alchemy_3 = yes
                    NOT = { DA_completed.Alchemy_4 = yes }
                    check_variable = {
                        which = DA_alchemy_exp
                        value = 10000
                    }
                }
            }
        }
        DA_has_NO_Project_active = yes
	}
	trigger = {
        hidden_trigger = {
		    always = yes
        }
	}
	effect = {
	}
}
custom_button = {
	name = DA_switch_button_Medicine
	tooltip = DA_switch_button_Medicine_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
	}
	trigger = {
		always = yes
	}
	effect = {
        clr_country_flag = DA_Metallurgy_interface_on_main
        clr_country_flag = DA_Metallurgy_interface_on_alloy
        clr_country_flag = DA_Metallurgy_interface_on_Arcane_Arts
        clr_country_flag = DA_Metallurgy_interface_on_Mechanics
        clr_country_flag = DA_Metallurgy_interface_on_Alchemy

        clr_country_flag = DA_Metallurgy_interface_on_wonders
        clr_country_flag = DA_Metallurgy_interface_on_inventions
        clr_country_flag = DA_Metallurgy_interface_on_research_facility

        set_country_flag = DA_Metallurgy_interface_on_Medicine
        hidden_effect = {
            export_to_variable = {
                value = modifier:DA_fake_alloy_common_slot_adder
                variable_name = DA_alloy_common_slots
            }
            export_to_variable = {
                value = modifier:DA_fake_alloy_rare_slot_adder
                variable_name = DA_alloy_rare_slots
            }
            export_to_variable = {
                value = modifier:DA_fake_alloy_legendary_slot_adder
                variable_name = DA_alloy_legendary_slots
            }
        }
	}
}
custom_button = {
	name = DA_Medicine_level_up_alert
	tooltip = DA_technology_level_up_alert_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_wonders }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_inventions }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_research_facility }
        custom_trigger_tooltip = {
            tooltip = DA_Increase_medicine_trigger_tt
            OR = {
                AND = {
                    NOT = { DA_completed.Medicine_1 = yes }
                    check_variable = {
                        which = DA_medicine_exp
                        value = 1000
                    }
                }
                AND = {
                    DA_completed.Medicine_1 = yes
                    NOT = { DA_completed.Medicine_2 = yes }
                    check_variable = {
                        which = DA_medicine_exp
                        value = 2500
                    }
                }
                AND = {
                    DA_completed.Medicine_2 = yes
                    NOT = { DA_completed.Medicine_3 = yes }
                    check_variable = {
                        which = DA_medicine_exp
                        value = 5000
                    }
                }
                AND = {
                    DA_completed.Medicine_3 = yes
                    NOT = { DA_completed.Medicine_4 = yes }
                    check_variable = {
                        which = DA_medicine_exp
                        value = 10000
                    }
                }
            }
        }
        DA_has_NO_Project_active = yes
	}
	trigger = {
        hidden_trigger = {
		    always = yes
        }
	}
	effect = {
	}
}





custom_button = {
	name = DA_switch_button_research_facility
	tooltip = DA_switch_button_research_facility_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_main }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_alloy }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Medicine }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Alchemy }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Mechanics }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Arcane_Arts }
	}
	trigger = {
		culture_group = dwarven
	}
	effect = {
        clr_country_flag = DA_Metallurgy_interface_on_main
        clr_country_flag = DA_Metallurgy_interface_on_alloy
        clr_country_flag = DA_Metallurgy_interface_on_inventions
        clr_country_flag = DA_Metallurgy_interface_on_wonders
        
        set_country_flag = DA_Metallurgy_interface_on_research_facility
	}
}
custom_button = {
	name = DA_switch_button_wonders
	tooltip = DA_switch_to_wonders_interface_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_main }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_alloy }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Medicine }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Alchemy }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Mechanics }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Arcane_Arts }
	}
	trigger = {
		culture_group = dwarven
	}
	effect = {
        clr_country_flag = DA_Metallurgy_interface_on_main
        clr_country_flag = DA_Metallurgy_interface_on_alloy
        clr_country_flag = DA_Metallurgy_interface_on_inventions
        clr_country_flag = DA_Metallurgy_interface_on_research_facility
        
        set_country_flag = DA_Metallurgy_interface_on_wonders
	}
}
custom_button = {
	name = DA_switch_button_inventions
	tooltip = DA_switch_button_inventions_tt
	potential = {
        NOT = { has_country_flag = DA_Metallurgy_interface_on_main }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_alloy }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Medicine }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Alchemy }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Mechanics }
        NOT = { has_country_flag = DA_Metallurgy_interface_on_Arcane_Arts }
	}
	trigger = {
		culture_group = dwarven
	}
	effect = {
        clr_country_flag = DA_Metallurgy_interface_on_main
        clr_country_flag = DA_Metallurgy_interface_on_alloy
        clr_country_flag = DA_Metallurgy_interface_on_wonders
        clr_country_flag = DA_Metallurgy_interface_on_research_facility
        
        set_country_flag = DA_Metallurgy_interface_on_inventions
	}
}
custom_button = {
	name = DA_Fake_Info_button
	tooltip = DA_Fake_Info_button_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		always = yes
	}
	effect = {
		custom_tooltip = DA_click_to_update_metals
		hidden_effect = {
			# DA_calculate_metal_provinces = yes
            country_event = { id = DA_Metallurgy_events.0 }
		}
	}
}


custom_button = {
	name = DA_Metallurgy_recruit_x1_button_infantry
	tooltip = DA_Metallurgy_recruit_x1_button_infantry_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		DA_can_use_infantry = yes
		treasury = 10
        manpower = 1
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_Infantry_Forcelimit_tt
            check_variable = {
                which = DA_Max_amount_of_warforged_infantry
                which = DA_current_amount_of_warforged_infantry
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_infantry_enabled_tt
			has_country_flag = DA_enable_metallurgy_System
        }
	}
	effect = {
        add_treasury = -10
        add_manpower = -1
        custom_tooltip = DA_create_1_Warforged_infantry_tt
        hidden_effect = {
            if = {
                limit = {
                    land_forcelimit = 1000
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_99
                    duration = -1
                }
            }
            else_if = {
                limit = {
                    land_forcelimit = 100
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_95
                    duration = -1
                }
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            remove_country_modifier = DA_land_force_limit_temp_reducer_95
            remove_country_modifier = DA_land_force_limit_temp_reducer_99
            export_to_variable = {
                value = modifier:DA_fake_warforged_infantry_force_limit
                variable_name = DA_Max_amount_of_warforged_infantry
            }
            export_to_variable = {
                value = modifier:DA_fake_warforged_infantry_force_limit_modifier
                variable_name = DA_amount_of_warforged_infantry_modifier
            }
            change_variable = {
                which = DA_amount_of_warforged_infantry_modifier
                value = 1
            }
            multiply_variable = {
                which = DA_Max_amount_of_warforged_infantry
                which = DA_amount_of_warforged_infantry_modifier
            }
            export_to_variable = {
                value = trigger_value:num_of_musketeers
                variable_name = DA_current_amount_of_warforged_infantry
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_recruit_x10_button_infantry
	tooltip = DA_Metallurgy_recruit_x10_button_infantry_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		DA_can_use_infantry = yes
		treasury = 100
        manpower = 10
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_Infantry_Forcelimit_tt
            check_variable = {
                which = DA_Max_amount_of_warforged_infantry
                which = DA_current_amount_of_warforged_infantry
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_infantry_enabled_tt
			has_country_flag = DA_enable_metallurgy_System
        }
	}
	effect = {
        add_treasury = -100
        add_manpower = -10
        custom_tooltip = DA_create_10_Warforged_infantry_tt
        hidden_effect = {
            if = {
                limit = {
                    land_forcelimit = 1000
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_99
                    duration = -1
                }
            }
            else_if = {
                limit = {
                    land_forcelimit = 100
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_95
                    duration = -1
                }
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = infantry
                special_unit_category = musketeer
                force_limit_percentage = 0.01
            }
            remove_country_modifier = DA_land_force_limit_temp_reducer_95
            remove_country_modifier = DA_land_force_limit_temp_reducer_99
            export_to_variable = {
                value = modifier:DA_fake_warforged_infantry_force_limit
                variable_name = DA_Max_amount_of_warforged_infantry
            }
            export_to_variable = {
                value = modifier:DA_fake_warforged_infantry_force_limit_modifier
                variable_name = DA_amount_of_warforged_infantry_modifier
            }
            change_variable = {
                which = DA_amount_of_warforged_infantry_modifier
                value = 1
            }
            multiply_variable = {
                which = DA_Max_amount_of_warforged_infantry
                which = DA_amount_of_warforged_infantry_modifier
            }
            export_to_variable = {
                value = trigger_value:num_of_musketeers
                variable_name = DA_current_amount_of_warforged_infantry
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_fake_cost_button_infantry
	tooltip = DA_Metallurgy_fake_cost_button_infantry_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		always = yes
	}
	effect = {
	}
}

custom_text_box = {
    name = DA_Metallurgy_fake_cost_button_infantry.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metallurgy_fake_cost_button_infantry.value #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}




custom_button = {
	name = DA_Metallurgy_recruit_x1_button_cavalry
	tooltip = DA_Metallurgy_recruit_x1_button_cavalry_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		DA_can_use_cavalry = yes
		treasury = 30
        manpower = 1
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_Juggernauts_Forcelimit_tt
            check_variable = {
                which = DA_Max_amount_of_warforged_cavalry
                which = DA_current_amount_of_warforged_cavalry
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_juggernauts_enabled_tt
			has_country_flag = DA_enable_metallurgy_System_cav
        }
	}
	effect = {
        add_treasury = -30
        add_manpower = -1
        custom_tooltip = DA_create_1_Warforged_cavalry_tt
        hidden_effect = {
            if = {
                limit = {
                    land_forcelimit = 1000
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_99
                    duration = -1
                }
            }
            else_if = {
                limit = {
                    land_forcelimit = 100
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_95
                    duration = -1
                }
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            remove_country_modifier = DA_land_force_limit_temp_reducer_95
            remove_country_modifier = DA_land_force_limit_temp_reducer_99
            export_to_variable = {
                value = modifier:DA_fake_warforged_cavalry_force_limit
                variable_name = DA_Max_amount_of_warforged_cavalry
            }
            export_to_variable = {
                value = modifier:DA_fake_warforged_cavalry_force_limit_modifier
                variable_name = DA_amount_of_warforged_cavalry_modifier
            }
            change_variable = {
                which = DA_amount_of_warforged_cavalry_modifier
                value = 1
            }
            multiply_variable = {
                which = DA_Max_amount_of_warforged_cavalry
                which = DA_amount_of_warforged_cavalry_modifier
            }
            export_to_variable = {
                value = trigger_value:num_of_hussars
                variable_name = DA_current_amount_of_warforged_cavalry
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_recruit_x10_button_cavalry
	tooltip = DA_Metallurgy_recruit_x10_button_cavalry_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		DA_can_use_cavalry = yes
		treasury = 300
        manpower = 10
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_Juggernauts_Forcelimit_tt
            check_variable = {
                which = DA_Max_amount_of_warforged_cavalry
                which = DA_current_amount_of_warforged_cavalry
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_juggernauts_enabled_tt
			has_country_flag = DA_enable_metallurgy_System_cav
        }
	}
	effect = {
        add_treasury = -300
        add_manpower = -10
        custom_tooltip = DA_create_10_Warforged_cavalry_tt
        hidden_effect = {
            if = {
                limit = {
                    land_forcelimit = 1000
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_99
                    duration = -1
                }
            }
            else_if = {
                limit = {
                    land_forcelimit = 100
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_95
                    duration = -1
                }
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = cavalry
                special_unit_category = hussars
                force_limit_percentage = 0.01
            }
            remove_country_modifier = DA_land_force_limit_temp_reducer_95
            remove_country_modifier = DA_land_force_limit_temp_reducer_99
            export_to_variable = {
                value = modifier:DA_fake_warforged_cavalry_force_limit
                variable_name = DA_Max_amount_of_warforged_cavalry
            }
            export_to_variable = {
                value = modifier:DA_fake_warforged_cavalry_force_limit_modifier
                variable_name = DA_amount_of_warforged_cavalry_modifier
            }
            change_variable = {
                which = DA_amount_of_warforged_cavalry_modifier
                value = 1
            }
            multiply_variable = {
                which = DA_Max_amount_of_warforged_cavalry
                which = DA_amount_of_warforged_cavalry_modifier
            }
            export_to_variable = {
                value = trigger_value:num_of_hussars
                variable_name = DA_current_amount_of_warforged_cavalry
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_fake_cost_button_cavalry
	tooltip = DA_Metallurgy_fake_cost_button_cavalry_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		always = yes
	}
	effect = {
	}
}
custom_text_box = {
    name = DA_Metallurgy_fake_cost_button_cavalry.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metallurgy_fake_cost_button_cavalry.value #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}



custom_button = {
	name = DA_Metallurgy_recruit_x1_button_artillery
	tooltip = DA_Metallurgy_recruit_x1_button_artillery_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		treasury = 35
        manpower = 1
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_artillery_Forcelimit_tt
            check_variable = {
                which = DA_Max_amount_of_warforged_artillery
                which = DA_current_amount_of_warforged_artillery
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_artillery_enabled_tt
			has_country_flag = DA_enable_metallurgy_System_art
        }
	}
	effect = {
        add_treasury = -35
        add_manpower = -1
        custom_tooltip = DA_create_1_Warforged_artillery_tt
        hidden_effect = {
            if = {
                limit = {
                    land_forcelimit = 1000
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_99
                    duration = -1
                }
            }
            else_if = {
                limit = {
                    land_forcelimit = 100
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_95
                    duration = -1
                }
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            remove_country_modifier = DA_land_force_limit_temp_reducer_95
            remove_country_modifier = DA_land_force_limit_temp_reducer_99
            export_to_variable = {
                value = modifier:DA_fake_warforged_artillery_force_limit
                variable_name = DA_Max_amount_of_warforged_artillery
            }
            export_to_variable = {
                value = modifier:DA_fake_warforged_artillery_force_limit_modifier
                variable_name = DA_amount_of_warforged_artillery_modifier
            }
            change_variable = {
                which = DA_amount_of_warforged_artillery_modifier
                value = 1
            }
            multiply_variable = {
                which = DA_Max_amount_of_warforged_artillery
                which = DA_amount_of_warforged_artillery_modifier
            }
            export_to_variable = {
                value = trigger_value:num_of_cawa
                variable_name = DA_current_amount_of_warforged_artillery
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_recruit_x10_button_artillery
	tooltip = DA_Metallurgy_recruit_x10_button_artillery_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		treasury = 350
        manpower = 10
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_artillery_Forcelimit_tt
            check_variable = {
                which = DA_Max_amount_of_warforged_artillery
                which = DA_current_amount_of_warforged_artillery
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_artillery_enabled_tt
			has_country_flag = DA_enable_metallurgy_System_art
        }
	}
	effect = {
        add_treasury = -350
        add_manpower = -10
        custom_tooltip = DA_create_10_Warforged_artillery_tt
        hidden_effect = {
            if = {
                limit = {
                    land_forcelimit = 1000
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_99
                    duration = -1
                }
            }
            else_if = {
                limit = {
                    land_forcelimit = 100
                }
                add_country_modifier = {
                    name = DA_land_force_limit_temp_reducer_95
                    duration = -1
                }
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            create_unit_forcelimit_percentage = {
                type = artillery
                special_unit_category = cawa
                force_limit_percentage = 0.01
            }
            remove_country_modifier = DA_land_force_limit_temp_reducer_95
            remove_country_modifier = DA_land_force_limit_temp_reducer_99
            export_to_variable = {
                value = modifier:DA_fake_warforged_artillery_force_limit
                variable_name = DA_Max_amount_of_warforged_artillery
            }
            export_to_variable = {
                value = modifier:DA_fake_warforged_artillery_force_limit_modifier
                variable_name = DA_amount_of_warforged_artillery_modifier
            }
            change_variable = {
                which = DA_amount_of_warforged_artillery_modifier
                value = 1
            }
            multiply_variable = {
                which = DA_Max_amount_of_warforged_artillery
                which = DA_amount_of_warforged_artillery_modifier
            }
            export_to_variable = {
                value = trigger_value:num_of_cawa
                variable_name = DA_current_amount_of_warforged_artillery
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_fake_cost_button_artillery
	tooltip = DA_Metallurgy_fake_cost_button_artillery_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		always = yes
	}
	effect = {
	}
}
custom_text_box = {
    name = DA_Metallurgy_fake_cost_button_artillery.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metallurgy_fake_cost_button_artillery.value #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}



custom_button = {
	name = DA_Metallurgy_Infantry_design_select_slider
	tooltip = DA_Metallurgy_Infantry_design_select_slider_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_NO_UNIT_DESIGN_IN_USE_tt
            NOT = { has_country_flag = DA_UNIT_DESIGN_IN_USE }
        }
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_infantry_enabled_tt
			has_country_flag = DA_enable_metallurgy_System
        }
	}
	effect = {
        clr_country_flag = DA_metallurgy_show_CAVAL
        clr_country_flag = DA_metallurgy_show_ARTIL
        
        set_country_flag = DA_metallurgy_show_INFAN
	}
}
custom_button = {
	name = DA_Metallurgy_cavalry_design_select_slider
	tooltip = DA_Metallurgy_cavalry_design_select_slider_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_NO_UNIT_DESIGN_IN_USE_tt
            NOT = { has_country_flag = DA_UNIT_DESIGN_IN_USE }
        }
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_juggernauts_enabled_tt
			has_country_flag = DA_enable_metallurgy_System_cav
        }
	}
	effect = {
        clr_country_flag = DA_metallurgy_show_INFAN
        clr_country_flag = DA_metallurgy_show_ARTIL

        set_country_flag = DA_metallurgy_show_CAVAL
	}
}
custom_button = {
	name = DA_Metallurgy_artillery_design_select_slider
	tooltip = DA_Metallurgy_artillery_design_select_slider_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_NO_UNIT_DESIGN_IN_USE_tt
            NOT = { has_country_flag = DA_UNIT_DESIGN_IN_USE }
        }
        custom_trigger_tooltip = {
            tooltip = DA_Warforged_artillery_enabled_tt
			has_country_flag = DA_enable_metallurgy_System_art
        }
	}
	effect = {
        clr_country_flag = DA_metallurgy_show_CAVAL
        clr_country_flag = DA_metallurgy_show_INFAN

        set_country_flag = DA_metallurgy_show_ARTIL
	}
}




custom_button = {
	name = DA_Metallurgy_Unit_image_shower
	tooltip = DA_Metallurgy_Unit_image_shower_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
    frame = {
        number = 1
        trigger = {
            has_country_flag = DA_metallurgy_show_INFAN
        }
    }
    frame = {
        number = 2
        trigger = {
            has_country_flag = DA_metallurgy_show_CAVAL
        }
    }
    frame = {
        number = 3
        trigger = {
            has_country_flag = DA_metallurgy_show_ARTIL
        }
    }
	trigger = {
        always = yes
	}
	effect = {
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            hidden_effect = {
                DA_pre_apply_metallurgy_modifiers = {
                    DA_unit = INFAN
                }
            }
            tooltip = {
                add_country_modifier = {
                    name = DA_metallurgy_infantry_modifier_fake
                    duration = -1
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_fire_TOTAL_INFAN
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_fire.INFAN.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_fire_TOTAL_INFAN
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_fire.INFAN.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_shock_TOTAL_INFAN
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_shock.INFAN.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_shock_TOTAL_INFAN
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_shock.INFAN.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_power_TOTAL_INFAN_shower
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_power.INFAN.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_power_TOTAL_INFAN_shower
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_power.INFAN.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_Fire_rec_TOTAL_INFAN
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Fire_rec.INFAN.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_Fire_rec_TOTAL_INFAN
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Fire_rec.INFAN.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_Shock_rec_TOTAL_INFAN_shower
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Shock_rec.INFAN.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_Shock_rec_TOTAL_INFAN_shower
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Shock_rec.INFAN.tt-
                }
                custom_tooltip = DA_Affect_only_warforged_tt
                DA_apply_metallurgy_infcav_modifiers_effect = {
                    DA_unit = INFAN
                }
                DA_give_Unique_Metallurgy_modifiers = {
                    DA_unit = INFAN
                }
                DA_Apply_cost_fake = {
                    DA_unit = INFAN
                }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            hidden_effect = {
                DA_pre_apply_metallurgy_modifiers = {
                    DA_unit = CAVAL
                }
            }
            tooltip = {
                add_country_modifier = {
                    name = DA_metallurgy_cavalry_modifier_fake
                    duration = -1
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_fire_TOTAL_CAVAL
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_fire.CAVAL.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_fire_TOTAL_CAVAL
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_fire.CAVAL.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_shock_TOTAL_CAVAL
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_shock.CAVAL.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_shock_TOTAL_CAVAL
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_shock.CAVAL.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_power_TOTAL_CAVAL_shower
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_power.CAVAL.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_power_TOTAL_CAVAL_shower
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_power.CAVAL.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_Fire_rec_TOTAL_CAVAL
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Fire_rec.CAVAL.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_Fire_rec_TOTAL_CAVAL
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Fire_rec.CAVAL.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_Shock_rec_TOTAL_CAVAL_shower
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Shock_rec.CAVAL.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_Shock_rec_TOTAL_CAVAL_shower
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Shock_rec.CAVAL.tt-
                }
                custom_tooltip = DA_Affect_only_warforged_juggernauts_tt
                DA_apply_metallurgy_infcav_modifiers_effect = {
                    DA_unit = CAVAL
                }
                DA_give_Unique_Metallurgy_modifiers = {
                    DA_unit = CAVAL
                }
                DA_Apply_cost_fake = {
                    DA_unit = CAVAL
                }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            hidden_effect = {
                DA_pre_apply_metallurgy_modifiers = {
                    DA_unit = ARTIL
                }
            }
            tooltip = {
                add_country_modifier = {
                    name = DA_metallurgy_artillery_modifier_fake
                    duration = -1
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_power_TOTAL_ARTIL_shower
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_power.ARTIL.tt
                }
                else_if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_power_TOTAL_ARTIL_shower
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_power.ARTIL.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_fire_TOTAL_ARTIL
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_fire.ARTIL.tt
                }
                else_if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_fire_TOTAL_ARTIL
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_fire.ARTIL.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_shock_TOTAL_ARTIL
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_shock.ARTIL.tt
                }
                else_if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_shock_TOTAL_ARTIL
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_shock.ARTIL.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_Fire_rec_TOTAL_ARTIL
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Fire_rec.ARTIL.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_Fire_rec_TOTAL_ARTIL
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Fire_rec.ARTIL.tt-
                }
                if = {
                    limit = {
                        check_variable = {
                            which = DA_Shock_rec_TOTAL_ARTIL_shower
                            value = 0.01
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Shock_rec.ARTIL.tt
                }
                if = {
                    limit = {
                        NOT = {
                            check_variable = {
                                which = DA_Shock_rec_TOTAL_ARTIL_shower
                                value = 0
                            }
                        }
                    }
                    custom_tooltip = DA_TOTAL_PREVIEW.DA_Shock_rec.ARTIL.tt-
                }
                custom_tooltip = DA_Affect_only_warforged_artillery_tt
                DA_apply_metallurgy_infcav_modifiers_effect = {
                    DA_unit = ARTIL
                }
                DA_give_Unique_Metallurgy_modifiers = {
                    DA_unit = ARTIL
                }
                DA_Apply_cost_fake = {
                    DA_unit = ARTIL
                }
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_designer_blueprint_button
	tooltip = DA_Metallurgy_designer_blueprint_button_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        hidden_trigger = {
            OR = {
                has_country_flag = DA_metallurgy_show_INFAN
                has_country_flag = DA_metallurgy_show_CAVAL
                has_country_flag = DA_metallurgy_show_ARTIL
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_NO_UNIT_DESIGN_IN_USE_tt
            NOT = { has_country_flag = DA_UNIT_DESIGN_IN_USE }
        }
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_NOT_yet_selected_blueprint_tt
                NOT = { has_country_flag = DA_selected_blueprint_INFAN }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_NOT_yet_selected_blueprint_tt
                NOT = { has_country_flag = DA_selected_blueprint_CAVAL }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_NOT_yet_selected_blueprint_tt
                NOT = { has_country_flag = DA_selected_blueprint_ARTIL }
            }
        }
	}
	effect = {
        set_country_flag = DA_UNIT_DESIGN_IN_USE
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            country_event = {
                id = DA_Metallurgy_events.50
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            country_event = {
                id = DA_Metallurgy_events.60
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            country_event = {
                id = DA_Metallurgy_events.70
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_designer_metal_button
	tooltip = DA_Metallurgy_designer_metal_button_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        hidden_trigger = {
            OR = {
                has_country_flag = DA_metallurgy_show_INFAN
                has_country_flag = DA_metallurgy_show_CAVAL
                has_country_flag = DA_metallurgy_show_ARTIL
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_NO_UNIT_DESIGN_IN_USE_tt
            NOT = { has_country_flag = DA_UNIT_DESIGN_IN_USE }
        }
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_selected_blueprint_first_tt
                has_country_flag = DA_selected_blueprint_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_NOT_yet_selected_metal_tt
                NOT = { has_country_flag = DA_selected_metal_INFAN }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_selected_blueprint_first_tt
                has_country_flag = DA_selected_blueprint_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_NOT_yet_selected_metal_tt
                NOT = { has_country_flag = DA_selected_metal_CAVAL }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_selected_blueprint_first_tt
                has_country_flag = DA_selected_blueprint_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_NOT_yet_selected_metal_tt
                NOT = { has_country_flag = DA_selected_metal_ARTIL }
            }
        }
	}
	effect = {
        set_country_flag = DA_UNIT_DESIGN_IN_USE
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            country_event = {
                id = DA_Metallurgy_events.51
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            country_event = {
                id = DA_Metallurgy_events.61
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            country_event = {
                id = DA_Metallurgy_events.71
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_designer_rune_button_1
	tooltip = DA_Metallurgy_designer_rune_button_1_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        hidden_trigger = {
            OR = {
                has_country_flag = DA_metallurgy_show_INFAN
                has_country_flag = DA_metallurgy_show_CAVAL
                has_country_flag = DA_metallurgy_show_ARTIL
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_runes_enchantments_in_unit_design_enabled_tt
			has_country_flag = DA_can_apply_runes_to_metallurgy
        }
        custom_trigger_tooltip = {
            tooltip = DA_NO_UNIT_DESIGN_IN_USE_tt
            NOT = { has_country_flag = DA_UNIT_DESIGN_IN_USE }
        }
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_blueprint_has_at_least_1_rune_slot_and_1_MC_tt
                check_variable = {
                    which = DA_Runes_Slots_STAT_MAX_INFAN
                    value = 1
                }
                check_variable = {
                    which = DA_Metal_Magic_Conductivity_STAT_INFAN
                    value = 1
                }
            }
            custom_trigger_tooltip = {
                tooltip = DA_free_rune_slot_1_tt
                NOT = { has_country_flag = DA_selected_INFAN_rune_1 }
                NOT = {
                    check_variable = {
                        which = DA_Runes_Slots_occupied_INFAN
                        which = DA_Runes_Slots_STAT_MAX_INFAN
                    }
                }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_blueprint_has_at_least_1_rune_slot_and_1_MC_tt
                check_variable = {
                    which = DA_Runes_Slots_STAT_MAX_CAVAL
                    value = 1
                }
                check_variable = {
                    which = DA_Metal_Magic_Conductivity_STAT_CAVAL
                    value = 1
                }
            }
            custom_trigger_tooltip = {
                tooltip = DA_free_rune_slot_1_tt
                NOT = { has_country_flag = DA_selected_CAVAL_rune_1 }
                NOT = {
                    check_variable = {
                        which = DA_Runes_Slots_occupied_CAVAL
                        which = DA_Runes_Slots_STAT_MAX_CAVAL
                    }
                }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_blueprint_has_at_least_1_rune_slot_and_1_MC_tt
                check_variable = {
                    which = DA_Runes_Slots_STAT_MAX_ARTIL
                    value = 1
                }
                check_variable = {
                    which = DA_Metal_Magic_Conductivity_STAT_ARTIL
                    value = 1
                }
            }
            custom_trigger_tooltip = {
                tooltip = DA_free_rune_slot_1_tt
                NOT = { has_country_flag = DA_selected_ARTIL_rune_1 }
                NOT = {
                    check_variable = {
                        which = DA_Runes_Slots_occupied_ARTIL
                        which = DA_Runes_Slots_STAT_MAX_ARTIL
                    }
                }
            }
        }
	}
	effect = {
        set_country_flag = DA_UNIT_DESIGN_IN_USE
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            country_event = {
                id = DA_Metallurgy_events.52
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            country_event = {
                id = DA_Metallurgy_events.62
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            country_event = {
                id = DA_Metallurgy_events.72
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_designer_rune_button_2
	tooltip = DA_Metallurgy_designer_rune_button_2_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        hidden_trigger = {
            OR = {
                has_country_flag = DA_metallurgy_show_INFAN
                has_country_flag = DA_metallurgy_show_CAVAL
                has_country_flag = DA_metallurgy_show_ARTIL
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_runes_enchantments_in_unit_design_enabled_tt
			has_country_flag = DA_can_apply_runes_to_metallurgy
        }
        custom_trigger_tooltip = {
            tooltip = DA_NO_UNIT_DESIGN_IN_USE_tt
            NOT = { has_country_flag = DA_UNIT_DESIGN_IN_USE }
        }
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_blueprint_has_at_least_2_rune_slot_and_1_MC_tt
                check_variable = {
                    which = DA_Runes_Slots_STAT_MAX_INFAN
                    value = 2
                }
                check_variable = {
                    which = DA_Metal_Magic_Conductivity_STAT_INFAN
                    value = 1
                }
            }
            custom_trigger_tooltip = {
                tooltip = DA_free_rune_slot_2_tt
                NOT = { has_country_flag = DA_selected_INFAN_rune_2 }
                NOT = {
                    check_variable = {
                        which = DA_Runes_Slots_occupied_INFAN
                        which = DA_Runes_Slots_STAT_MAX_INFAN
                    }
                }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_blueprint_has_at_least_2_rune_slot_and_1_MC_tt
                check_variable = {
                    which = DA_Runes_Slots_STAT_MAX_CAVAL
                    value = 2
                }
                check_variable = {
                    which = DA_Metal_Magic_Conductivity_STAT_CAVAL
                    value = 1
                }
            }
            custom_trigger_tooltip = {
                tooltip = DA_free_rune_slot_2_tt
                NOT = { has_country_flag = DA_selected_CAVAL_rune_2 }
                NOT = {
                    check_variable = {
                        which = DA_Runes_Slots_occupied_CAVAL
                        which = DA_Runes_Slots_STAT_MAX_CAVAL
                    }
                }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_blueprint_has_at_least_2_rune_slot_and_1_MC_tt
                check_variable = {
                    which = DA_Runes_Slots_STAT_MAX_ARTIL
                    value = 2
                }
                check_variable = {
                    which = DA_Metal_Magic_Conductivity_STAT_ARTIL
                    value = 1
                }
            }
            custom_trigger_tooltip = {
                tooltip = DA_free_rune_slot_2_tt
                NOT = { has_country_flag = DA_selected_ARTIL_rune_2 }
                NOT = {
                    check_variable = {
                        which = DA_Runes_Slots_occupied_ARTIL
                        which = DA_Runes_Slots_STAT_MAX_ARTIL
                    }
                }
            }
        }
	}
	effect = {
        set_country_flag = DA_UNIT_DESIGN_IN_USE
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            country_event = {
                id = DA_Metallurgy_events.52
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            country_event = {
                id = DA_Metallurgy_events.62
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            country_event = {
                id = DA_Metallurgy_events.72
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_designer_rune_button_3
	tooltip = DA_Metallurgy_designer_rune_button_3_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        hidden_trigger = {
            OR = {
                has_country_flag = DA_metallurgy_show_INFAN
                has_country_flag = DA_metallurgy_show_CAVAL
                has_country_flag = DA_metallurgy_show_ARTIL
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_runes_enchantments_in_unit_design_enabled_tt
			has_country_flag = DA_can_apply_runes_to_metallurgy
        }
        custom_trigger_tooltip = {
            tooltip = DA_NO_UNIT_DESIGN_IN_USE_tt
            NOT = { has_country_flag = DA_UNIT_DESIGN_IN_USE }
        }
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_blueprint_has_3_rune_slot_and_1_MC_tt
                check_variable = {
                    which = DA_Runes_Slots_STAT_MAX_INFAN
                    value = 3
                }
                check_variable = {
                    which = DA_Metal_Magic_Conductivity_STAT_INFAN
                    value = 1
                }
            }
            custom_trigger_tooltip = {
                tooltip = DA_free_rune_slot_3_tt
                NOT = { has_country_flag = DA_selected_INFAN_rune_3 }
                NOT = {
                    check_variable = {
                        which = DA_Runes_Slots_occupied_INFAN
                        which = DA_Runes_Slots_STAT_MAX_INFAN
                    }
                }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_blueprint_has_3_rune_slot_and_1_MC_tt
                check_variable = {
                    which = DA_Runes_Slots_STAT_MAX_CAVAL
                    value = 3
                }
                check_variable = {
                    which = DA_Metal_Magic_Conductivity_STAT_CAVAL
                    value = 1
                }
            }
            custom_trigger_tooltip = {
                tooltip = DA_free_rune_slot_3_tt
                NOT = { has_country_flag = DA_selected_CAVAL_rune_3 }
                NOT = {
                    check_variable = {
                        which = DA_Runes_Slots_occupied_CAVAL
                        which = DA_Runes_Slots_STAT_MAX_CAVAL
                    }
                }
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_blueprint_has_3_rune_slot_and_1_MC_tt
                check_variable = {
                    which = DA_Runes_Slots_STAT_MAX_ARTIL
                    value = 3
                }
                check_variable = {
                    which = DA_Metal_Magic_Conductivity_STAT_ARTIL
                    value = 1
                }
            }
            custom_trigger_tooltip = {
                tooltip = DA_free_rune_slot_3_tt
                NOT = { has_country_flag = DA_selected_ARTIL_rune_3 }
                NOT = {
                    check_variable = {
                        which = DA_Runes_Slots_occupied_ARTIL
                        which = DA_Runes_Slots_STAT_MAX_ARTIL
                    }
                }
            }
        }
	}
	effect = {
        set_country_flag = DA_UNIT_DESIGN_IN_USE
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            country_event = {
                id = DA_Metallurgy_events.52
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            country_event = {
                id = DA_Metallurgy_events.62
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            country_event = {
                id = DA_Metallurgy_events.72
            }
        }
	}
}





custom_button = {
	name = DA_Metallurgy_Finale_button
	tooltip = DA_Metallurgy_Finale_button_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        hidden_trigger = {
            OR = {
                has_country_flag = DA_metallurgy_show_INFAN
                has_country_flag = DA_metallurgy_show_CAVAL
                has_country_flag = DA_metallurgy_show_ARTIL
            }
        }
        mil_power = 30
        NOT = { has_country_modifier = DA_unit_design_in_prgress }
        custom_trigger_tooltip = {
            tooltip = DA_NO_UNIT_DESIGN_IN_USE_tt
            NOT = { has_country_flag = DA_UNIT_DESIGN_IN_USE }
        }
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_you_must_reset_the_unit_designer_first
                NOT = { has_country_modifier = DA_metallurgy_infantry_modifier_fake }
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_selected_blueprint_first_tt
                has_country_flag = DA_selected_blueprint_INFAN
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_INFAN
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_you_must_reset_the_unit_designer_first
                NOT = { has_country_modifier = DA_metallurgy_cavalry_modifier_fake }
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_selected_blueprint_first_tt
                has_country_flag = DA_selected_blueprint_CAVAL
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_CAVAL
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_you_must_reset_the_unit_designer_first
                NOT = { has_country_modifier = DA_metallurgy_artillery_modifier_fake }
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_selected_blueprint_first_tt
                has_country_flag = DA_selected_blueprint_ARTIL
            }
            custom_trigger_tooltip = {
                tooltip = DA_must_have_already_selected_metal_tt
                has_country_flag = DA_selected_metal_ARTIL
            }
        }
	}
	effect = {
        set_country_flag = DA_UNIT_DESIGN_IN_USE
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            hidden_effect = {
                DA_remove_metallurgy_infcav_modifiers_effect = {
                    DA_unit = INFAN
                }
                DA_remove_Unique_Metallurgy_modifiers = {
                    DA_unit = INFAN
                }
            }
            add_mil_power = -30
            add_country_modifier = {
                name = DA_unit_design_in_prgress
                duration = 365
            }
            country_event = {
                id = DA_Metallurgy_events.53
                days = 365
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            hidden_effect = {
                DA_remove_metallurgy_infcav_modifiers_effect = {
                    DA_unit = CAVAL
                }
                DA_remove_Unique_Metallurgy_modifiers = {
                    DA_unit = CAVAL
                }
            }
            add_mil_power = -30
            add_country_modifier = {
                name = DA_unit_design_in_prgress
                duration = 365
            }
            country_event = {
                id = DA_Metallurgy_events.63
                days = 365
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            hidden_effect = {
                DA_remove_metallurgy_infcav_modifiers_effect = {
                    DA_unit = ARTIL
                }
                DA_remove_Unique_Metallurgy_modifiers = {
                    DA_unit = ARTIL
                }
            }
            add_mil_power = -30
            add_country_modifier = {
                name = DA_unit_design_in_prgress
                duration = 365
            }
            country_event = {
                id = DA_Metallurgy_events.73
                days = 365
            }
        }
	}
}
custom_button = {
	name = DA_Metallurgy_Designer_reset_button
	tooltip = DA_Metallurgy_Designer_reset_button_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        hidden_trigger = {
            OR = {
                has_country_flag = DA_metallurgy_show_INFAN
                has_country_flag = DA_metallurgy_show_CAVAL
                has_country_flag = DA_metallurgy_show_ARTIL
            }
        }
        custom_trigger_tooltip = {
            tooltip = DA_NO_UNIT_DESIGN_IN_USE_tt
            NOT = { has_country_flag = DA_UNIT_DESIGN_IN_USE }
        }
	}
	effect = {
        if = {
            limit = {
                has_country_flag = DA_metallurgy_show_INFAN
            }
            DA_initialize_metallurgy_variables = {
                DA_unit = INFAN
            }
            DA_remove_Unique_Metallurgy_modifiers_flags = {
                DA_unit = INFAN
            }
            hidden_effect = {
			    remove_country_modifier = DA_metallurgy_infantry_modifier_fake
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_CAVAL
            }
            DA_initialize_metallurgy_variables = {
                DA_unit = CAVAL
            }
            DA_remove_Unique_Metallurgy_modifiers_flags = {
                DA_unit = CAVAL
            }
            hidden_effect = {
			    remove_country_modifier = DA_metallurgy_cavalry_modifier_fake
            }
        }
        else_if = {
            limit = {
                has_country_flag = DA_metallurgy_show_ARTIL
            }
            DA_initialize_metallurgy_variables = {
                DA_unit = ARTIL
            }
            DA_remove_Unique_Metallurgy_modifiers_flags = {
                DA_unit = ARTIL
            }
            hidden_effect = {
			    remove_country_modifier = DA_metallurgy_artillery_modifier_fake
            }
        }
	}
}





























































custom_button = {
	name = DA_Increase_metallurgy
	tooltip = DA_Increase_metallurgy_tt
	potential = {
        has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
        custom_trigger_tooltip = {
            tooltip = DA_Increase_metallurgy_trigger_tt
            OR = {
                AND = {
                    NOT = { DA_completed.Metallurgy_1 = yes }
                    check_variable = {
                        which = DA_metallurgy_exp
                        value = 1000
                    }
                }
                AND = {
                    DA_completed.Metallurgy_1 = yes
                    NOT = { DA_completed.Metallurgy_2 = yes }
                    check_variable = {
                        which = DA_metallurgy_exp
                        value = 2500
                    }
                }
                AND = {
                    DA_completed.Metallurgy_2 = yes
                    NOT = { DA_completed.Metallurgy_3 = yes }
                    check_variable = {
                        which = DA_metallurgy_exp
                        value = 5000
                    }
                }
                AND = {
                    DA_completed.Metallurgy_3 = yes
                    NOT = { DA_completed.Metallurgy_4 = yes }
                    check_variable = {
                        which = DA_metallurgy_exp
                        value = 10000
                    }
                }
            }
        }
        DA_has_NO_Project_active = yes
	}
	effect = {
        add_country_modifier = {
            name = DA_Tech_Researching_Metallurgy
            duration = -1
        }
        hidden_effect = {
            if = {
                limit = {
                    NOT = { DA_completed.Metallurgy_1 = yes }
                }
                subtract_variable = {
                    which = DA_metallurgy_exp
                    value = 1000
                }
                country_event = {
                    id = DA_Tech_Tree_event.500
                    days = 365
                }
            }
            else_if = {
                limit = {
                    DA_completed.Metallurgy_1 = yes
                    NOT = { DA_completed.Metallurgy_2 = yes }
                }
                subtract_variable = {
                    which = DA_metallurgy_exp
                    value = 2500
                }
                country_event = {
                    id = DA_Tech_Tree_event.501
                    days = 365
                }
            }
            else_if = {
                limit = {
                    DA_completed.Metallurgy_2 = yes
                    NOT = { DA_completed.Metallurgy_3 = yes }
                }
                subtract_variable = {
                    which = DA_metallurgy_exp
                    value = 5000
                }
                country_event = {
                    id = DA_Tech_Tree_event.503
                    days = 240
                }
            }
            else_if = {
                limit = {
                    DA_completed.Metallurgy_3 = yes
                    NOT = { DA_completed.Metallurgy_4 = yes }
                }
                subtract_variable = {
                    which = DA_metallurgy_exp
                    value = 10000
                }
                country_event = {
                    id = DA_Tech_Tree_event.506
                    days = 240
                }
            }
        }
	}
}

custom_button = {
	name = DA_Met_COST_fake_button
	tooltip = DA_Met_COST_fake_button_tt
	potential = {
		has_country_flag = DA_Metallurgy_interface_on_main
	}
	trigger = {
		always = yes
	}
	effect = {
	}
}

custom_text_box = {
    name = DA_Met_COST_Shower #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Met_COST_Shower.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Tech_Shower.Metallurgy #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Tech_Shower.Metallurgy.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

# All metal values here

# commons

custom_text_box = {
    name = DA_Metal_Shower.Iron.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Iron.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Copper.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Copper.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Gold.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Gold.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Silver.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Silver.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Tin.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Tin.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Aluminium.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Aluminium.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Titanium.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Titanium.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Chromium.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Chromium.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Castellium.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Castellium.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Zinc.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Zinc.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Lead.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Lead.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

# rares 1

custom_text_box = {
    name = DA_Metal_Shower.Quicksilver.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Quicksilver.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Palladium.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Palladium.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Platinum.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Platinum.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Tantalum.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Tantalum.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = DA_Metal_Shower.Damestear.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Damestear.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Meteoric_Silver.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Meteoric_Silver.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Cobalt.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Cobalt.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Tungsten.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Tungsten.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}


# rares 2

custom_text_box = {
    name = DA_Metal_Shower.Dagrite.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Dagrite.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Rosemetal.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Rosemetal.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Cold_iron.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Cold_iron.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Mithril.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Mithril.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.EbonSteel.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.EbonSteel.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.IronWood.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.IronWood.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Orichalcum.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Orichalcum.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Octiron.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Octiron.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

# legendaries

custom_text_box = {
    name = DA_Metal_Shower.Cindersteel.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Cindersteel.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Magnetite.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Magnetite.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Mistium.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Mistium.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Skyshard.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Skyshard.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Adamantium.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Adamantium.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Unastu_Argazen.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Unastu_Argazen.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Bloth_Dolur.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Bloth_Dolur.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Sylvanite.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Sylvanite.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.VoidSteel.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.VoidSteel.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Unobtainium.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Unobtainium.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}
custom_text_box = {
    name = DA_Metal_Shower.Hihiirokane.value #Must match a scripted instantTextBoxType in a .gui file
    potential = { has_country_flag = DA_Metallurgy_interface_on_main } #Determines when the text is visible
    tooltip = DA_Metal_Shower.Hihiirokane.tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}



