# Do not change tags in here without changing every other reference to them.
# If adding new buildings, make sure they are uniquely named.

# cost = x #==> cost in $ to build (subject to other modifiers)
# time = x #==> number of months to build.
# modifier = m # a modifier on the province that the building gives
# trigger = t # an and trigger that needs to be fullfilled to build and keep the building
# one_per_country = yes/no # if yes, only one of these can exist in a country
# manufactory = { trade_good trade_good } # list of trade goods that get a production bonus
# onmap = yes/no # show as a sprite on the map

# FROM = owner
# ROOT = province

# Building AI is now mainly hard-coded. The AI will estimate how much it gains yearly from each building,
# convert the value to ducats, and take the building with biggest yearly return as a percentage of the build cost.
# If lower than 1%, the AI will not consider the yearly return worth it.
# It will also require higher yearly return if the economy in not in prime shape.
# Forts' value also get converted to a yearly return based on terrain and strategic position, as well as available budget for fort maintenance.

# AI can still be modded though; it will multiply the yearly return with the value of ai_will_do.
# If you don't want the AI to build a building at all, make ai_will_do become 0.
# AI will consider each building to be worth 0.01 ducats per year as a base, so making ai_will_do above cost will have them build it at some point.
# It will still check whether it can afford a building before doing so though, but may save up to it.

################################################
# trade buildings
################################################


DA_local_market = { # local market, to be renamed
	cost = 80
	time = 12

	modifier = {
		province_trade_power_modifier = 0.25
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
marketplace = {
	cost = 140
	time = 12

	make_obsolete = DA_local_market
	modifier = {
		province_trade_power_modifier = 0.5
	}
	on_built = {
		add_development_from_building = {
			building = marketplace
			type = production
			value = 1
		}
		
		#Anbennar
		anbennar_building_effect = yes

		if = {
			limit = { FROM = { has_government_attribute = learning_by_doing_reform_effect } }
			FROM = { change_government_reform_progress = 4 }
		}
		if = {
			limit = {
				FROM = {
					religion = genie_cult
					has_country_flag = holy_buildings_active
				}
			}
			add_province_modifier = {
				name = holy_buildings_sailors
				duration = 7300
			}
		}
		if = {
			limit = { owner = { has_estate_privilege = estate_burghers_U10_construction_rights } }
			area = {
				limit = { owned_by = FROM }
				add_province_modifier = {
					name = U10_affluent_reclaimation
					duration = -1
				}
			}
		}

		owner = { accretive_path_jiangszun_chi_stacking_effect = { amount = 20 } }
		owner = { accretive_path_upper_raheni_chi_stacking_effect = { amount = 20 } }

		gronstunad_building_authority_effect = { value = 1 }

		sponsored_adventurers_building_reform_effect = { value = 5 type = trade }
	}
	on_destroyed = {
		remove_development_from_building = {
			building = marketplace
			type = production
			value = 1
		}
		if = {
			limit = {
				NOT = {
					area_for_scope_province = {
						owned_by = FROM
						has_trade_building_trigger = yes
					}
				}
			}
			area = {
				limit = { owned_by = FROM }
				remove_province_modifier = U10_affluent_reclaimation
			}
		}
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25


	on_obsolete = {
		gronstunad_building_authority_effect = { value = -1 }
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}

trade_depot = {
	cost = 280
	time = 12

	make_obsolete = marketplace

	modifier = {
		province_trade_power_modifier = 0.75
	}

	on_built = {
		add_development_from_upgrading_or_building = {
			building = trade_depot
			obsolete_building = marketplace
			type = production
			value = 2
			upgrade_value = 1
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_government_attribute = learning_by_doing_reform_effect } }
			FROM = { change_government_reform_progress = 4 }
		}

		owner = { accretive_path_jiangszun_chi_stacking_effect = { amount = 20 } }
		owner = { accretive_path_upper_raheni_chi_stacking_effect = { amount = 20 } }

		gronstunad_building_authority_effect = { value = 3 }

		sponsored_adventurers_building_reform_effect = { value = 5 type = trade }

		if = {
			limit = { owner = { has_estate_privilege = estate_burghers_U10_construction_rights } }
			area = {
				limit = { owned_by = FROM }
				add_province_modifier = {
					name = U10_affluent_reclaimation
					duration = -1
				}
			}
		}
	}
	on_destroyed = {
		remove_development_from_building = {
			building = trade_depot
			type = production
			value = 2
		}
		if = {
			limit = {
				NOT = {
					area_for_scope_province = {
						owned_by = FROM
						has_trade_building_trigger = yes
					}
				}
			}
			area = {
				limit = { owned_by = FROM }
				remove_province_modifier = U10_affluent_reclaimation
			}
		}
	}
	on_obsolete = {
		gronstunad_building_authority_effect = { value = -3 }
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
stock_exchange = {
	cost = 450
	time = 12

	make_obsolete = trade_depot

	modifier = {
		province_trade_power_modifier = 1.0
	}

	on_built = {
		if = {
			limit = {
				has_province_flag = built_dev_trade_depot
			}
			add_development_from_upgrading_or_building = {
				building = stock_exchange
				obsolete_building = trade_depot
				type = production
				value = 3
				upgrade_value = 1
			}
		}
		else_if = {
			limit = {
				has_province_flag = built_dev_marketplace
			}
			add_development_from_upgrading_or_building = {
				building = stock_exchange
				obsolete_building = marketplace
				type = production
				value = 3
				upgrade_value = 2
			}
		}
		else = {
			add_development_from_building = {
				building = stock_exchange
				type = production
				value = 3
			}
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_government_attribute = learning_by_doing_reform_effect } }
			FROM = { change_government_reform_progress = 4 }
		}

		owner = { accretive_path_jiangszun_chi_stacking_effect = { amount = 20 } }
		owner = { accretive_path_upper_raheni_chi_stacking_effect = { amount = 20 } }

		gronstunad_building_authority_effect = { value = 4 }

		sponsored_adventurers_building_reform_effect = { value = 5 type = trade }

		if = {
			limit = { owner = { has_estate_privilege = estate_burghers_U10_construction_rights } }
			area = {
				limit = { owned_by = FROM }
				add_province_modifier = {
					name = U10_affluent_reclaimation
					duration = -1
				}
			}
		}
	}
	on_destroyed = {
		remove_development_from_building = {
			building = stock_exchange
			type = production
			value = 3
		}
		if = {
			limit = {
				NOT = {
					area_for_scope_province = {
						owned_by = FROM
						has_trade_building_trigger = yes
					}
				}
			}
			area = {
				limit = { owned_by = FROM }
				remove_province_modifier = U10_affluent_reclaimation
			}
		}
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}



DA_arcane_appraiser = { # local market, to be renamed
	cost = 150
	time = 20

	modifier = {
		trade_value_modifier = 0.1
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_arcane_tech_exchange = { # local market, to be renamed
	cost = 350
	time = 40

	make_obsolete = DA_arcane_appraiser
	modifier = {
		trade_value_modifier = 0.25
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}


################################################
# production buildings
################################################

workshop = {
	cost = 80
	time = 12
	modifier = {
		local_production_efficiency = 0.25
	}
	on_built = {
		on_built_production_building_effect = yes
		add_development_from_building = {
			building = workshop
			type = production
			value = 1
		}
		
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_estate_privilege = estate_dragon_command_war_room_rights } }
			FROM = { add_legitimacy = 0.5 }
		}
		if = {
			limit = {
				FROM = {
					religion = genie_cult
					has_country_flag = holy_buildings_active
				}
			}
			add_province_modifier = {
				name = holy_buildings_production
				duration = 7300
			}
		}

		gronstunad_building_authority_effect = { value = 1 }

		sponsored_adventurers_building_reform_effect = { value = 5 type = prod }
	}
	on_destroyed = {
		remove_development_from_building = {
			building = workshop
			type = production
			value = 1
		}
	}
	on_obsolete = {
		gronstunad_building_authority_effect = { value = -1 }
	}

	allow_in_gold_provinces = no

	ai_will_do = {
		factor = 1
	}
}

counting_house = {
	cost = 200
	time = 12

	build_trigger = {
		DA_Province_has_arcane_power_or_higher = yes
	}
	make_obsolete = workshop
	modifier = {
		local_production_efficiency = 0.5
	}

	on_built = {
		on_built_production_building_effect = yes
		add_development_from_upgrading_or_building = {
			building = counting_house
			obsolete_building = workshop
			type = production
			value = 2
			upgrade_value = 1
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_estate_privilege = estate_dragon_command_war_room_rights } }
			FROM = { add_legitimacy = 0.5 }
		}

		gronstunad_building_authority_effect = { value = 4 }

		sponsored_adventurers_building_reform_effect = { value = 5 type = prod }
	}
	on_destroyed = {
		remove_development_from_building = {
			building = counting_house
			type = production
			value = 2
		}
	}
	on_obsolete = {
	}

	allow_in_gold_provinces = no

	ai_will_do = {
		factor = 1
	}
}
DA_steam_workshop = {
	cost = 450
	time = 18

	build_trigger = {
		DA_Province_has_steam_power_or_higher = yes
	}
	make_obsolete = counting_house
	modifier = {
		local_production_efficiency = 0.7
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_electrical_workshop = {
	cost = 450
	time = 18

	build_trigger = {
		DA_Province_has_electric_power_or_higher = yes
	}
	make_obsolete = DA_steam_workshop
	modifier = {
		local_production_efficiency = 1.0
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}

# artisan line

DA_artisan_building_1 = {
	cost = 100
	time = 18

	build_trigger = {
		owner = {
			custom_trigger_tooltip = {
				tooltip = DA_unlocked.artisan_buildings.tt
				has_country_flag = DA_Unlocked.artisan_buildings
			}
		}
	}
	modifier = {
		trade_goods_size_modifier = 0.1
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_artisan_building_2 = {
	cost = 200
	time = 18

	make_obsolete = DA_artisan_building_1
	build_trigger = {
		owner = {
			custom_trigger_tooltip = {
				tooltip = DA_unlocked.artisan_buildings.tt
				has_country_flag = DA_Unlocked.artisan_buildings
			}
		}
	}
	modifier = {
		trade_goods_size_modifier = 0.2
		local_production_efficiency = -0.1
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_artisan_building_3 = {
	cost = 300
	time = 24

	make_obsolete = DA_artisan_building_2
	build_trigger = {
		owner = {
			custom_trigger_tooltip = {
				tooltip = DA_unlocked.artisan_buildings.tt
				has_country_flag = DA_Unlocked.artisan_buildings
			}
		}
	}
	modifier = {
		trade_goods_size_modifier = 0.35
		local_production_efficiency = -0.2
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}

# assembler line

DA_assembler_building_1 = {
	cost = 160
	time = 24

	build_trigger = {
		owner = {
			custom_trigger_tooltip = {
				tooltip = DA_unlocked.assembler_buildings.tt
				has_country_flag = DA_Unlocked.assembler_buildings
			}
		}
		DA_Province_has_arcane_power_or_higher = yes
	}
	modifier = {
		trade_goods_size = 0.3
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_assembler_building_2 = {
	cost = 320
	time = 24

	make_obsolete = DA_assembler_building_1
	build_trigger = {
		owner = {
			custom_trigger_tooltip = {
				tooltip = DA_unlocked.assembler_buildings.tt
				has_country_flag = DA_Unlocked.assembler_buildings
			}
		}
		DA_Province_has_steam_power_or_higher = yes
	}
	modifier = {
		trade_goods_size = 0.6
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_assembler_building_3 = {
	cost = 480
	time = 36

	make_obsolete = DA_assembler_building_2
	build_trigger = {
		owner = {
			custom_trigger_tooltip = {
				tooltip = DA_unlocked.assembler_buildings.tt
				has_country_flag = DA_Unlocked.assembler_buildings
			}
		}
		DA_Province_has_electric_power_or_higher = yes
	}
	modifier = {
		trade_goods_size = 1
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
################################################
# tax buildings
################################################

DA_tax_building_1 = {
	cost = 80
	time = 12

	build_trigger = {
	}
	modifier = {
		tax_income = 0.5
		local_tax_modifier = 0.2
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_tax_building_2 = {
	cost = 180
	time = 12

	make_obsolete = DA_tax_building_1
	build_trigger = {
	}
	modifier = {
		tax_income = 1
		local_tax_modifier = 0.45
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_tax_building_3 = {
	cost = 300
	time = 18

	make_obsolete = DA_tax_building_2
	build_trigger = {
	}
	modifier = {
		tax_income = 1.5
		local_tax_modifier = 0.7
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_tax_building_4 = {
	cost = 550
	time = 24

	make_obsolete = DA_tax_building_3
	build_trigger = {
	}
	modifier = {
		tax_income = 2
		local_tax_modifier = 1.0
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_tax_building_5 = {
	cost = 800
	time = 36

	make_obsolete = DA_tax_building_4
	build_trigger = {
	}
	modifier = {
		tax_income = 2.5
		local_tax_modifier = 1.25
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}

################################################
# religion buildings
################################################

temple = {
	cost = 80
	time = 12
	modifier = {
		local_monthly_devastation = -0.02
		local_unrest = -1
		local_missionary_strength = 0.01
		local_religious_unity_contribution = 0.1
		local_religious_conversion_resistance = 0.1
	}
	on_built = {
		on_built_tax_building_effect = yes
		on_province_tax_building_built_estate_privileges_effect = yes
		add_development_from_building = {
			building = temple
			type = tax
			value = 1
		}
		
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_government_attribute = learning_by_doing_reform_effect } }
			FROM = { change_government_reform_progress = 4 }
		}
		if = {
			limit = {
				FROM = { has_government_attribute = on_church_built_clergy_loyalty }
			}
			FROM = {
				add_estate_loyalty = {
					estate = estate_church
					loyalty = 2
				}
			}
		}
		if = {
			limit = {
				FROM = { has_government_attribute = temples_modifier }
				owned_by = FROM 
			}
			add_province_modifier = {
				name = gov_expanded_temple_rights_mod
				duration = -1
			}
		}
		if = {
			limit = { FROM = { religion = ynn_river_worship } }
			FROM = { add_authority = 2 }
		}
		if = {
			limit = { FROM = { has_estate_privilege = estate_tiger_command_war_room_rights } }
			FROM = { add_legitimacy = 0.5 }
		}
		Y72_add_dev_from_building = { #1.35, Chien Binhrung
			building = temple
			type = tax
			value = 1 
		}
		if = {
			limit = { FROM = { tag = I98 mission_completed = I98_involuntary_revenue_service } }
			add_province_modifier = { name = I98_IRS_activities duration = -1 }
		}
		if = {
			limit = {
				FROM = {
					religion = genie_cult
					has_country_flag = holy_buildings_active
				}
			}
			add_province_modifier = {
				name = holy_buildings_tax
				duration = 7300
			}
		}
		if = {
			limit = {
				FROM = {
					has_estate_privilege = estate_church_corinsfield_church_raisings
				}
			}
			add_base_tax = 1
		}

		owner = { accretive_path_harimari_chi_stacking_effect = { amount = 20 } }
		owner = { accretive_path_goldscale_kobold_chi_stacking_effect = { amount = 20 } }

		gronstunad_building_authority_effect = { value = 1 }

		sponsored_adventurers_building_reform_effect = { value = 5 type = tax }
		
		if = {
			limit = { province_group = infernal_court_temples }
			infernal_deity_upgrade_effect = yes
		}
		spirit_fort_awakening_effect = yes

		if = {
			limit = {
				FROM = {
					has_country_flag = zokka_temple_upgrade_flag
				}
			}
			add_province_modifier = {
				name = zokka_tithe
				duration = -1
			}
		}
	}
	on_destroyed = {
		on_province_tax_building_destroyed_estate_privileges_effect = yes
		remove_development_from_building = {
			building = temple
			type = tax
			value = 1
		}
		if = {
			limit = {
				FROM = { has_government_attribute = on_church_built_clergy_loyalty }
			}
			FROM = {
				add_estate_loyalty = {
					estate = estate_church
					loyalty = -2
				}
			}
		}
		remove_province_modifier = gov_expanded_temple_rights_mod
		if = {
			limit = { FROM = { religion = ynn_river_worship } }
			if = {
				limit = { FROM = { is_subject = no } }
				FROM = {
					add_authority = -2
					add_country_modifier = {
						name = ynn_temple_crasher
						duration = 1825 #5 Years
					}
				}
			}
			else = {
				FROM = {
					overlord = {
						add_authority = -2
						add_country_modifier = {
							name = ynn_temple_crasher
							duration = 1825 #5 Years
						}
					}
				}
			}
		}
		Y72_remove_dev_from_building = { #1.35, Chien Binhrung
			building = temple
			type = tax
			value = 1 
		}
		if = {
			limit = {
				FROM = {
					has_estate_privilege = estate_church_corinsfield_church_raisings
				}
			}
			add_base_tax = -1
		}
		remove_province_modifier = I98_IRS_activities
		remove_province_modifier = zokka_tithe
	}
	on_obsolete = {
		gronstunad_building_authority_effect = { value = -1 }
	}
	ai_will_do = {
		factor = 1
	}
}
cathedral = {
	make_obsolete = temple

	cost = 200
	time = 18
	modifier = {
		local_monthly_devastation = -0.04
		local_unrest = -2
		local_missionary_strength = 0.02
		local_religious_unity_contribution = 0.2
		local_religious_conversion_resistance = 0.2
	}
	on_built = {
		on_built_tax_building_effect = yes
		on_province_tax_building_built_estate_privileges_effect = yes
		add_development_from_upgrading_or_building = {
			building = cathedral
			obsolete_building = temple
			type = tax
			value = 2
			upgrade_value = 1
		}
		if = {
			limit = {
				FROM = { has_government_attribute = on_church_built_clergy_loyalty }
			}
			FROM = {
				add_estate_loyalty = {
					estate = estate_church
					loyalty = 5
				}
			}
		}
		if = {
			limit = {
				FROM = { has_government_attribute = temples_modifier }
				owned_by = FROM 
			}
			add_province_modifier = {
				name = gov_expanded_temple_rights_mod
				duration = -1
			}
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_government_attribute = learning_by_doing_reform_effect } }
			FROM = { change_government_reform_progress = 4 }
		}
		if = {
			limit = { FROM = { has_estate_privilege = estate_tiger_command_war_room_rights } }
			FROM = { add_legitimacy = 0.5 }
		}
		Y72_add_dev_from_building = { #1.35, Chien Binhrung
			building = cathedral 
			type = tax
			value = 2 
		}
		if = {
			limit = { FROM = { tag = I98 mission_completed = I98_involuntary_revenue_service } }
			add_province_modifier = { name = I98_IRS_activities duration = -1 }
		}
		if = {
			limit = { FROM = { has_government_attribute = command_tiger_elevation_modifier } }
			add_province_modifier = {
				name = commmand_tiger_temple_buff
				duration = -1
			}
		}
		if = {
			limit = {
				FROM = {
					has_estate_privilege = estate_church_corinsfield_church_raisings
				}
			}
			add_base_tax = 2
		}
		
		owner = { accretive_path_harimari_chi_stacking_effect = { amount = 20 } }
		owner = { accretive_path_goldscale_kobold_chi_stacking_effect = { amount = 20 } }

		gronstunad_building_authority_effect = { value = 3 }

		sponsored_adventurers_building_reform_effect = { value = 5 type = tax }
		
		if = {
			limit = {
				FROM = {
					has_country_flag = zokka_temple_upgrade_flag
				}
			}
			add_province_modifier = {
				name = zokka_tithe_better
				duration = -1
			}
			remove_province_modifier = zokka_tithe
		}
		if = {
			limit = { province_group = infernal_court_temples }
			infernal_deity_upgrade_effect = yes
		}
		spirit_fort_awakening_effect = yes
	}
	on_destroyed = {
		on_province_tax_building_destroyed_estate_privileges_effect = yes
		remove_development_from_building = {
			building = cathedral
			type = tax
			value = 2 #1.35
		}
		if = {
			limit = {
				FROM = { has_government_attribute = on_church_built_clergy_loyalty }
			}
			FROM = {
				add_estate_loyalty = {
					estate = estate_church
					loyalty = -5
				}
			}
		}
		remove_province_modifier = gov_expanded_temple_rights_mod
		#Anbennar
		Y72_remove_dev_from_building = { #1.35, Chien Binhrung
			building = cathedral 
			type = tax
			value = 2 
		}
		if = {
			limit = {
				FROM = {
					has_estate_privilege = estate_church_corinsfield_church_raisings
				}
			}
			add_base_tax = -2
		}
		remove_province_modifier = I98_IRS_activities
		remove_province_modifier = commmand_tiger_temple_buff
		remove_province_modifier = zokka_tithe_better
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 1
	}
}
DA_religious_building_3 = {

	cost = 350
	time = 18
	modifier = {
		local_monthly_devastation = -0.06
		local_unrest = -3
		local_missionary_strength = 0.03
		local_religious_unity_contribution = 0.3
		local_religious_conversion_resistance = 0.3
	}

	make_obsolete = cathedral
	build_trigger = {
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_religious_building_4 = {
	cost = 350
	time = 18
	modifier = {
		local_monthly_devastation = -0.08
		local_unrest = -4
		local_missionary_strength = 0.04
		local_religious_unity_contribution = 0.4
		local_religious_conversion_resistance = 0.4
	}

	make_obsolete = DA_religious_building_3
	build_trigger = {
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}

################################################
# army buildings
################################################

DA_warforged_building_1 = {
	cost = 80
	time = 12

	build_trigger = {
	}
	modifier = {
		DA_fake_warforged_infantry_force_limit = 1
		DA_fake_warforged_cavalry_force_limit = 0.5
		DA_fake_warforged_artillery_force_limit = 0.75
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_warforged_building_2 = {
	cost = 180
	time = 12

	make_obsolete = DA_warforged_building_1
	build_trigger = {
	}
	modifier = {
		DA_fake_warforged_infantry_force_limit = 2
		DA_fake_warforged_cavalry_force_limit = 1
		DA_fake_warforged_artillery_force_limit = 1.5
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_warforged_building_3 = {
	cost = 300
	time = 18

	make_obsolete = DA_warforged_building_2
	build_trigger = {
	}
	modifier = {
		yearly_army_professionalism = 0.0005
		DA_fake_warforged_infantry_force_limit = 3
		DA_fake_warforged_cavalry_force_limit = 1.5
		DA_fake_warforged_artillery_force_limit = 2.25
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_warforged_building_4 = {
	cost = 550
	time = 24

	make_obsolete = DA_warforged_building_3
	build_trigger = {
	}
	modifier = {
		yearly_army_professionalism = 0.001
		DA_fake_warforged_infantry_force_limit = 4
		DA_fake_warforged_cavalry_force_limit = 2
		DA_fake_warforged_artillery_force_limit = 3
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}

# manpower buildings

barracks = {
	cost = 80
	time = 12
	modifier = {
		regiment_recruit_speed = -0.05
		local_manpower = 0.05
		local_manpower_modifier = 0.2
	}
	on_built = {
		on_built_manpower_building_effect = yes 
		add_development_from_building = {
			building = barracks
			type = manpower
			value = 1
		}

		update_improved_military_buildings_modifier = { #1.35
			building = barracks
		}

		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_estate_privilege = estate_boar_command_war_room_rights } }
			FROM = { add_legitimacy = 0.5 }
		}
		if = {
			limit = {
				FROM = {
					religion = genie_cult
					has_country_flag = holy_buildings_active
				}
			}
			add_province_modifier = {
				name = holy_buildings_manpower
				duration = 7300
			}
		}

		owner = { accretive_path_jiangyang_chi_stacking_effect = { amount = 20 } }

		gronstunad_building_authority_effect = { value = 1 }
		
		if = { #Degakheion
			limit = { FROM = { has_country_flag = degakheion_manpower_building_buff } }
			add_province_modifier = {
				name = G46_barracks_buff
				duration = -1
			}
		}
	} 
	on_destroyed = {
		# if = {
			# limit = {
				# FROM = {
					# has_government_attribute = manpower_sailors_on_build
				# }
			# }
			# FROM = {
				# add_manpower = -1
			# }
		# }
		remove_development_from_building = {
			building = barracks
			type = manpower
			value = 1
		}

		update_improved_military_buildings_modifier = {
			building = barracks #1.35
		}

		if = { #Degakheion
			limit = { FROM = { has_country_flag = degakheion_manpower_building_buff } }
			remove_province_modifier = G46_barracks_buff
		}
	}
	on_obsolete = {
		gronstunad_building_authority_effect = { value = -1 }
		if = { #Degakheion
			limit = { FROM = { has_country_flag = degakheion_manpower_building_buff } }
			remove_province_modifier = G46_barracks_buff
		}
	}

	ai_will_do = {
		factor = 1
	}
}
training_fields = {
	cost = 250
	time = 12

	make_obsolete = barracks

	modifier = {
		regiment_recruit_speed = -0.1
		local_manpower = 0.1
		local_manpower_modifier = 0.4
	}

	on_built = {
		on_built_manpower_building_effect = yes 
		# if = {
			# limit = {
				# FROM = {
					# has_government_attribute = manpower_sailors_on_build
				# }
			# }
			# FROM = {
				# add_manpower = 1
			# }
		# }
		add_development_from_upgrading_or_building = {
			building = training_fields
			obsolete_building = barracks
			type = manpower
			value = 2
			upgrade_value = 1
		}

		update_improved_military_buildings_modifier = { #1.35
			building = training_fields
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_estate_privilege = estate_boar_command_war_room_rights } }
			FROM = { add_legitimacy = 0.5 }
		}

		owner = { accretive_path_jiangyang_chi_stacking_effect = { amount = 20 } }

		gronstunad_building_authority_effect = { value = 3 }
		
		if = { #Taychendi Empire
			limit = { FROM =  { has_country_flag = J84_training_fields_flag } }
			add_province_modifier = {
				name = J84_training_fields_buff
				duration = -1
			}
		}

		if = { #Degakheion
			limit = { FROM = { has_country_flag = degakheion_manpower_building_buff } }
			add_province_modifier = {
				name = G46_training_fields_buff
				duration = -1
			}
		}
	}
	on_destroyed = {
		update_improved_military_buildings_modifier = { #1.35
			building = training_fields
		}
		#Anbennar
		if = { #Taychendi Empire
			limit = { FROM =  { has_country_flag = J84_training_fields_flag } }
			remove_province_modifier = J84_training_fields_buff
		}

		if = { #Degakheion
			limit = { FROM = { has_country_flag = degakheion_manpower_building_buff } }
			remove_province_modifier = G46_training_fields_buff
		}
		# if = {
			# limit = {
				# FROM = {
					# has_government_attribute = manpower_sailors_on_build
				# }
			# }
			# FROM = {
				# add_manpower = -1
			# }
		# }
	}
	on_obsolete = {
		remove_development_from_building = {
			building = training_fields
			type = manpower
			value = 2
		}
	}

	ai_will_do = {
		factor = 1
	}
}
DA_manpower_building_3 = {
	cost = 300
	time = 18

	make_obsolete = training_fields
	build_trigger = {
	}
	modifier = {
		regiment_recruit_speed = -0.15
		local_manpower = 0.15
		local_manpower_modifier = 0.6
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_manpower_building_4 = {
	cost = 550
	time = 24

	make_obsolete = DA_manpower_building_3
	build_trigger = {
	}
	modifier = {
		regiment_recruit_speed = -0.2
		local_manpower = 0.2
		local_manpower_modifier = 0.8
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}


# force limit buildings


regimental_camp = {
	cost = 70
	time = 12
	modifier = {
		local_unrest = -1
		local_garrison_size = 0.05
		land_forcelimit = 0.5
	}

	on_built = {
		add_development_from_building = {
			building = regimental_camp
			type = manpower
			value = 1
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_estate_privilege = estate_boar_command_war_room_rights } }
			FROM = { add_legitimacy = 0.5 }
		}
		update_improved_military_buildings_modifier = { #1.35
			building = regimental_camp
		}

		gronstunad_building_authority_effect = { value = 2 }

		owner = { accretive_path_jiangyang_chi_stacking_effect = { amount = 20 } }
	}
	on_destroyed = {
		update_improved_military_buildings_modifier = { #1.35
			building = regimental_camp
		}
		remove_development_from_building = {
			building = regimental_camp
			type = manpower
			value = 1
		}
	}
	on_obsolete = {
		gronstunad_building_authority_effect = { value = -2 }
	}

	ai_will_do = {
		factor = 1
		modifier = {
			factor = 1.5 # more likely if we have an army close to the force limit
			FROM = { army_size_percentage = 0.95 }
		}
		modifier = {
			factor = 1.1
			local_autonomy = 50
		}
	}
}

conscription_center = {
	cost = 140
	time = 12


	make_obsolete = regimental_camp

	# THIS = Province, FROM = Builder(not nessecairly owner, can be overlord)

	modifier = {
		local_unrest = -2
		local_garrison_size = 0.1
		land_forcelimit = 1
	}
	on_built = {
		add_development_from_upgrading_or_building = {
			building = conscription_center
			obsolete_building = regimental_camp
			type = manpower
			value = 2
			upgrade_value = 1
		}

		update_improved_military_buildings_modifier = { #1.35
			building = conscription_center
		}

		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_estate_privilege = estate_boar_command_war_room_rights } }
			FROM = { add_legitimacy = 0.5 }
		}

		owner = { accretive_path_jiangyang_chi_stacking_effect = { amount = 20 } }

		gronstunad_building_authority_effect = { value = 4 }
	}
	on_destroyed = {
		remove_development_from_building = {
			building = conscription_center
			type = manpower
			value = 2
		}

		update_improved_military_buildings_modifier = { #1.35
			building = conscription_center
		}
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 1
		modifier = {
			factor = 1.5 # more likely if we have an army close to the force limit
			FROM = { army_size_percentage = 0.95 }
		}
		modifier = {
			factor = 1.1
			local_autonomy = 50
		}
	}
}

DA_forcelimit_building_3 = {
	cost = 280
	time = 18

	make_obsolete = conscription_center
	build_trigger = {
	}
	modifier = {
		local_unrest = -3
		local_garrison_size = 0.15
		land_forcelimit = 1.5
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_forcelimit_building_4 = {
	cost = 560
	time = 24

	make_obsolete = DA_forcelimit_building_3
	build_trigger = {
	}
	modifier = {
		local_unrest = -4
		local_garrison_size = 0.2
		land_forcelimit = 2
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
################################################
# navy buildings
################################################

# force limit buildings

shipyard = {
	cost = 100
	time = 12
	build_trigger = {
		has_port = yes
	}
	modifier = {
		naval_forcelimit = 1
		ship_recruit_speed = -0.125
		local_ship_repair = 0.125
		local_has_man_of_war = yes #1.35
		local_has_galleass = yes #1.35
	}
	on_built = {
		add_development_from_building = {
			building = shipyard
			type = production
			value = 1
		}
		#Anbennar
		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 1 }
	}
	on_destroyed = {
		remove_development_from_building = {
			building = shipyard
			type = production
			value = 1
		}
	}
	on_obsolete = {
		gronstunad_building_authority_effect = { value = -1 }
	}

	ai_will_do = {
		factor = 1
		modifier = {
			factor = 1.5 # bit more likely if close to the naval force limit
			FROM = { navy_size_percentage = 0.95 }
		}
		modifier = {
			factor = 1.1
			local_autonomy = 50
		}
	}
}

grand_shipyard = {
	cost = 300
	time = 12

	make_obsolete = shipyard

	build_trigger = {
		has_port = yes
	}
	modifier = {
		naval_forcelimit = 2
		ship_recruit_speed = -0.25
		local_ship_repair = 0.25
		local_has_man_of_war = yes #1.35
		local_has_galleass = yes #1.35
	}

	on_built = {
		add_development_from_upgrading_or_building = {
			building = grand_shipyard
			obsolete_building = shipyard
			type = production
			value = 2
			upgrade_value = 1
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { province_id = 4372 owner = { mission_completed = iyarhashar_bavijay_shipyard } }
			add_province_modifier = { name = iyarhashar_bavijay_shipyard duration = -1 }
		}

		gronstunad_building_authority_effect = { value = 3 }
	}
	on_destroyed = {
		remove_development_from_building = {
			building = grand_shipyard
			type = production
			value = 2
		}
		if = {
			limit = { has_province_modifier = sca_swe_danish_shipyard }
			remove_province_modifier = sca_swe_danish_shipyard
		}
		if = {
			limit = { province_id = 4372 has_province_modifier = iyarhashar_bavijay_shipyard }
			remove_province_modifier = iyarhashar_bavijay_shipyard
		}
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 1
		modifier = {
			factor = 1.5 # bit more likely if close to the force limit
			FROM = { navy_size_percentage = 0.95 }
		}
		modifier = {
			factor = 1.1
			local_autonomy = 50
		}
	}
}

DA_navy_forcelimit_building_3 = {
	cost = 280
	time = 18

	make_obsolete = grand_shipyard
	build_trigger = {
	}
	modifier = {
		naval_forcelimit = 3
		ship_recruit_speed = -0.375
		local_ship_repair = 0.375
		local_has_man_of_war = yes #1.35
		local_has_galleass = yes #1.35
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_navy_forcelimit_building_4 = {
	cost = 560
	time = 24

	make_obsolete = DA_navy_forcelimit_building_3
	build_trigger = {
	}
	modifier = {
		naval_forcelimit = 4
		ship_recruit_speed = -0.50
		local_ship_repair = 0.50
		local_has_man_of_war = yes #1.35
		local_has_galleass = yes #1.35
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}

# sailors buildings


dock = {
	cost = 70
	time = 12
	build_trigger = {
		has_port = yes
	}
	modifier = {
		local_ship_cost = -0.05
		local_sailors = 50
		local_sailors_modifier = 0.2
		local_has_man_of_war = yes #1.35
		local_has_galleass = yes #1.35
	}

	on_built = {
		add_development_from_building = {
			building = dock
			type = production
			value = 1
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = {
				FROM = {
					religion = genie_cult
					has_country_flag = holy_buildings_active
				}
			}
			add_province_modifier = {
				name = holy_buildings_sailors
				duration = 7300
			}
		}

		gronstunad_building_authority_effect = { value = 1 }

		if = {
			limit = {
				FROM = {
					has_estate_privilege = estate_nobility_lizardfolk_imperial_fisheries
				}
				OR = {
					province_id = 5896 
					province_id = 5898
					province_id = 5834
					province_id = 3259
					province_id = 3258
				}
			}
			add_province_modifier = {
				name = lizardfolk_imperial_fisheries
				duration = -1
			}
		}

		z22_white_harbour_build_check = yes
	}

	on_destroyed = {
		remove_development_from_building = {
			building = dock
			type = production
			value = 1
		}
		if = {
			limit = { has_province_modifier = lizardfolk_imperial_fisheries }
			remove_province_modifier = lizardfolk_imperial_fisheries
		}
	}
	on_obsolete = {
		gronstunad_building_authority_effect = { value = -1 }
	}

	ai_will_do = {
		factor = 1
		modifier = {
			current_age = age_of_discovery
			owner = { NOT = { navy_size = 25 } }
			factor = 0.25
		}
		modifier = {
			current_age = age_of_reformation
			owner = { NOT = { navy_size = 50 } }
			factor = 0.35
		}
		modifier = {
			current_age = age_of_absolutism
			owner = { NOT = { navy_size = 75 } }
			factor = 0.5
		}
		modifier = {
			current_age = age_of_revolutions
			owner = { NOT = { navy_size = 100 } }
			factor = 0.75
		}
		modifier = {
			owner = {
				OR = {
					full_idea_group = naval_ideas
					has_idea_group = maritime_ideas
				}
			}
			factor = 1.25
		}
		modifier = {
			owner = {
				capital_scope = {
					has_port = yes
					is_island = yes
				}
			}
			factor = 1.35
		}
		modifier = {
			owner = {
				sailors_percentage = 0.75
			}
			factor = 0
		}
	}
}

drydock = {
	cost = 140
	time = 12

	make_obsolete = dock

	build_trigger = {
		has_port = yes
	}

	modifier = {
		local_ship_cost = -0.075
		local_sailors = 100
		local_sailors_modifier = 0.4
		local_has_man_of_war = yes #1.35
		local_has_galleass = yes #1.35
	}

	on_built = {
		add_development_from_upgrading_or_building = {
			building = drydock
			obsolete_building = dock
			type = production
			value = 2
			upgrade_value = 1
		}
		#Anbennar
		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 3 }

		if = {
			limit = {
				FROM = {
					has_estate_privilege = estate_nobility_lizardfolk_imperial_fisheries
				}
				OR = {
					province_id = 5896 
					province_id = 5898
					province_id = 5834
					province_id = 3259
					province_id = 3258
				}
			}
			add_province_modifier = {
				name = lizardfolk_imperial_fisheries
				duration = -1
			}
		}
	}

	on_destroyed = {
		remove_development_from_building = {
			building = drydock
			type = production
			value = 2
		}
		if = {
			limit = { has_province_modifier = lizardfolk_imperial_fisheries }
			remove_province_modifier = lizardfolk_imperial_fisheries
		}
	}
	on_obsolete = {
	}


	ai_will_do = {
		factor = 1
	}
}

DA_navy_sailors_building_3 = {
	cost = 280
	time = 18

	make_obsolete = drydock
	build_trigger = {
	}
	modifier = {
		local_ship_cost = -0.125
		local_sailors = 150
		local_sailors_modifier = 0.6
		local_has_man_of_war = yes #1.35
		local_has_galleass = yes #1.35
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}
DA_navy_sailors_building_4 = {
	cost = 560
	time = 24

	make_obsolete = DA_navy_sailors_building_3
	build_trigger = {
	}
	modifier = {
		local_ship_cost = -0.1
		local_sailors = 200
		local_sailors_modifier = 0.8
		local_has_man_of_war = yes #1.35
		local_has_galleass = yes #1.35
	}
	on_built = {
	}
	on_destroyed = {
	}

	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	on_obsolete = {
	}

	ai_will_do = {
		factor = 1.5 # Because hard-coded AI only considers what it will gain, not what its enemies will lose.
	}
}

# coastal defense


coastal_defence = {

	cost = 100
	time = 12
	build_trigger = {
		has_port = yes
	}
	on_built = {
		#Anbennar
		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 1 }
	}
	modifier = {
		blockade_force_required = 0.5
		hostile_disembark_speed = 1.0
		block_slave_raid = yes
	}

	on_obsolete = {
		gronstunad_building_authority_effect = { value = -1 }
	}

	ai_will_do = {
		factor = 1
	}
}

naval_battery = {

	make_obsolete = coastal_defence
	cost = 200
	time = 12
	build_trigger = {
		has_port = yes
	}
	on_built = {
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { province_id = 4551 owner = { mission_completed = R38_relock_the_gate } }
			add_province_modifier = { name = bhuvauri_gatehouse_of_rahen duration = -1 }
		}

		gronstunad_building_authority_effect = { value = 2 }
	}
	on_destroyed = {
		if = {
			limit = { province_id = 4551 }
			remove_province_modifier = bhuvauri_gatehouse_of_rahen
		}
	}
	modifier = {
		blockade_force_required = 1.0
		hostile_disembark_speed = 2.0
		hostile_fleet_attrition = 5
		block_slave_raid = yes
	}

	ai_will_do = {
		factor = 1
	}
}
################################################
# infrastructure buildings
################################################

DA_road_building_1 = {
	cost = 25
	time = 6
	modifier = {
		local_friendly_movement_speed = 0.025
		local_hostile_movement_speed = 0.025
		province_trade_power_value = 0.25
		local_prosperity_growth = 0.05
		allowed_num_of_buildings = 1
	}

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15 # Base of 0.01 ducats per MONTH
	}
}
DA_road_building_2 = {
	cost = 50
	time = 6
	modifier = {
		local_friendly_movement_speed = 0.05
		local_hostile_movement_speed = 0.05
		province_trade_power_value = 0.5
		local_prosperity_growth = 0.1
		allowed_num_of_buildings = 1
	}
	make_obsolete = DA_road_building_1

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15 # Base of 0.01 ducats per MONTH
	}
}
DA_road_building_3 = {
	cost = 100
	time = 9
	modifier = {
		local_friendly_movement_speed = 0.1
		local_hostile_movement_speed = 0.1
		province_trade_power_value = 1
		local_prosperity_growth = 0.15
		allowed_num_of_buildings = 1
	}
	make_obsolete = DA_road_building_2

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15 # Base of 0.01 ducats per MONTH
	}
}
DA_road_building_4 = {
	cost = 200
	time = 12
	modifier = {
		local_friendly_movement_speed = 0.15
		local_hostile_movement_speed = 0.15
		province_trade_power_value = 2
		local_prosperity_growth = 0.2
		allowed_num_of_buildings = 1
	}
	make_obsolete = DA_road_building_3

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15  # Base of 0.01 ducats per MONTH
	}
}

# deposit

DA_deposit_building_1 = {
	cost = 50
	time = 9
	modifier = {
		supply_limit = 1
		supply_limit_modifier = 0.1
		local_monthly_devastation = -0.02
		allowed_num_of_buildings = 1
	}

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15 # Base of 0.01 ducats per MONTH
	}
}
DA_deposit_building_2 = {
	cost = 100
	time = 12
	modifier = {
		supply_limit = 2
		supply_limit_modifier = 0.2
		local_monthly_devastation = -0.04
		local_defensiveness = 0.05
		allowed_num_of_buildings = 1
	}
	make_obsolete = DA_deposit_building_1

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15 # Base of 0.01 ducats per MONTH
	}
}
DA_deposit_building_3 = {
	cost = 200
	time = 15
	modifier = {
		supply_limit = 3
		supply_limit_modifier = 0.35
		local_monthly_devastation = -0.06
		local_defensiveness = 0.1
		allowed_num_of_buildings = 1
	}
	make_obsolete = DA_deposit_building_2

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15 # Base of 0.01 ducats per MONTH
	}
}
DA_deposit_building_4 = {
	cost = 400
	time = 18
	modifier = {
		supply_limit = 5
		supply_limit_modifier = 0.5
		local_monthly_devastation = -0.10
		local_defensiveness = 0.15
		allowed_num_of_buildings = 1
	}
	make_obsolete = DA_deposit_building_3

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15  # Base of 0.01 ducats per MONTH
	}
}
################################################
# education buildings
################################################

DA_education_building_1 = {
	cost = 70
	time = 9
	
	build_trigger = {
	}
	
	modifier = {
		local_development_cost = -0.025
		allowed_num_of_buildings = 1
		local_institution_spread = 0.025
	}

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15  # Base of 0.01 ducats per MONTH
	}
}
DA_education_building_2 = {
	cost = 140
	time = 12
	
	make_obsolete = DA_education_building_1
	build_trigger = {
	}
	
	modifier = {
		local_development_cost = -0.05
		allowed_num_of_buildings = 1
		local_institution_spread = 0.05
	}

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15  # Base of 0.01 ducats per MONTH
	}
}
DA_education_building_3 = {
	cost = 280
	time = 15
	
	make_obsolete = DA_education_building_2
	build_trigger = {
	}
	
	modifier = {
		local_development_cost = -0.10
		allowed_num_of_buildings = 1
		local_institution_spread = 0.1
	}

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15  # Base of 0.01 ducats per MONTH
	}
}

university = {
	cost = 560
	time = 18
	make_obsolete = DA_education_building_3
	modifier = {
		local_development_cost = -0.20
		allowed_num_of_buildings = 1
		local_institution_spread = 0.15
	}

	on_built = {
		add_development_from_building = {
			building = university
			type = tax
			value = 2
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_estate_privilege = estate_tiger_command_war_room_rights } }
			FROM = { add_legitimacy = 1 }
		}
		
		owner = { accretive_path_harimari_chi_stacking_effect = { amount = 20 } }

		gronstunad_building_authority_effect = { value = 3 }
		
		#Drozma Tur
		dt_community_advancement_institution_spread_effect = yes 
		if = {
			limit = {
				owner = {
					religion = drozma_tur
					has_church_aspect = community_advancement_aspect_adm
				}
				NOT = {
					has_province_modifier = dt_communities_advancement_prosperity
				}
			}
			add_province_modifier = {
				name = dt_communities_advancement_prosperity
				duration = -1
			}
		}
		if = {
			limit = {
				owner = {
					owns = 536
				}
				536 = {
					has_great_project = {
						type = eduz_ginakku
						tier = 3
					}
				}
			}
			add_province_modifier = {
				name = eduz_ginakku_university
				duration = -1
				hidden = yes
			}
		}
	}
	on_destroyed = {
		remove_development_from_building = {
			building = university
			type = tax
			value = 2
		}
		remove_province_modifier = eduz_ginakku_university
		dt_community_advancement_institution_spread_effect = yes 
	}
	on_obsolete = {
	}

	ai_will_do = {
		# Hard coded AI sees no value in this above the 0.01 ducats base. Let's multiply that
		factor = 12 # Base of 0.01 ducats per MONTH
		modifier = {
			factor = 10
			development = 16
		}
		modifier = {
			factor = 1.4
			development = 21
		}
		modifier = {
			factor = 1.4
			development = 26
		}
		modifier = {
			factor = 1.4
			development = 30
		}
		modifier = {
			factor = 0
			is_state = no
		}
		modifier = {
			factor = 2
			is_capital = yes
		}
		modifier = {
			factor = 0.5
			OR = {
				has_climate = tropical
				has_climate = arid
			}
		}
		modifier = {
			factor = 0.2
			has_climate = arctic
		}
		modifier = {
			factor = 1.2
			OR = {
				has_terrain = grasslands
				has_terrain = drylands
			}
		}
		modifier = {
			factor = 1.3
			has_terrain = farmlands
		}
		modifier = {
			factor = 2
			is_year = 1690 # Enlightenment spawns in 1700
			not = {
				owner = {
					has_institution = enlightenment
				}
			}
			not = {
				provincial_institution_progress = {
					which = enlightenment
					value = 20
				}
			}
		}
	}
}

################################################
# government buildings
################################################

courthouse = {
	cost = 70
	time = 9
	modifier = {
		local_state_maintenance_modifier = -0.1
		local_autonomy = -0.05
		local_governing_cost = -0.15
		allowed_num_of_buildings = 1
	}
	on_built = {
		add_development_from_building = {
			building = courthouse
			type = tax
			value = 1
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_government_attribute = learning_by_doing_reform_effect } }
			FROM = { change_government_reform_progress = 4 }
		}
		if = {
			limit = { FROM = { has_estate_privilege = estate_wolf_command_war_room_rights } }
			FROM = { add_legitimacy = 0.5 }
		}
		if = {
			limit = {
				FROM = {
					religion = genie_cult
					has_country_flag = holy_buildings_active
				}
			}
			add_province_modifier = {
				name = holy_buildings_unrest
				duration = 7300
			}
		}
		
		owner = { accretive_path_jiangyang_chi_stacking_effect = { amount = 10 } }

		gronstunad_building_authority_effect = { value = 1 }
	}
	on_destroyed = {
		remove_development_from_building = {
			building = courthouse
			type = tax
			value = 1
		}
	}
	on_obsolete = {
		gronstunad_building_authority_effect = { value = -1 }
	}

	ai_will_do = {
		factor = 1
		modifier = {
			factor = 2
			FROM = { governing_capacity_percentage = 0.8 }
		}
		modifier = {
			factor = 3
			FROM = { governing_capacity_percentage = 1 }
		}
		modifier = {
			factor = 5
			FROM = { governing_capacity_percentage = 1.1 }
		}
		modifier = {
			factor = 0.75
			FROM = { num_of_loans = 1 }
		}
		modifier = {
			factor = 0.25
			FROM = { num_of_loans = 2 }
		}
		modifier = {
			factor = 0
			FROM = { num_of_loans = 3 }
		}
		modifier = {
			factor = 0.5
			FROM = { is_in_deficit = yes }
		}
		modifier = {
			factor = 1.25
			development = 10
		}
		modifier = {
			factor = 1.25
			development = 20
		}
		modifier = {
			factor = 1.25
			development = 30
		}
		modifier = {
			factor = 0.5
			FROM = { NOT = { treasury = 200 } }
		}
		modifier = {
			factor = 1.25
			FROM = { treasury = 300 }
		}
		#Provinces in the Capital Area don't need a courthouse
		modifier = {
			factor = 0
			area_for_scope_province = {
				is_capital_of = FROM
			}
		}
	}
}

town_hall = {
	cost = 140
	time = 12

	make_obsolete = courthouse

	modifier = {
		local_state_maintenance_modifier = -0.2
		local_autonomy = -0.1
		local_governing_cost = -0.3
		allowed_num_of_buildings = 1
	}

	on_built = {
		add_development_from_upgrading_or_building = {
			building = town_hall
			obsolete_building = courthouse
			type = tax
			value = 2
			upgrade_value = 1
		}
		#Anbennar
		anbennar_building_effect = yes
		if = {
			limit = { FROM = { has_estate_privilege = estate_wolf_command_war_room_rights } }
			FROM = { add_legitimacy = 0.5 }
		}
		if = {
			limit = { FROM = { has_government_attribute = learning_by_doing_reform_effect } }
			FROM = { change_government_reform_progress = 4 }
		}
		
		owner = { accretive_path_jiangyang_chi_stacking_effect = { amount = 10 } }

		gronstunad_building_authority_effect = { value = 2 }
	}
	on_destroyed = {
		remove_development_from_building = {
			building = town_hall
			type = tax
			value = 2
		}
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 1
		modifier = {
			factor = 10
			has_building = courthouse
		}
		modifier = {
			factor = 2
			FROM = { governing_capacity_percentage = 0.8 }
		}
		modifier = {
			factor = 3
			FROM = { governing_capacity_percentage = 1 }
		}
		modifier = {
			factor = 5
			FROM = { governing_capacity_percentage = 1.1 }
		}
		modifier = {
			factor = 0.75
			FROM = { num_of_loans = 1 }
		}
		modifier = {
			factor = 0.25
			FROM = { num_of_loans = 2 }
		}
		modifier = {
			factor = 0
			FROM = { num_of_loans = 3 }
		}
		modifier = {
			factor = 0.5
			FROM = { is_in_deficit = yes }
		}
		modifier = {
			factor = 1.25
			development = 10
		}
		modifier = {
			factor = 1.25
			development = 20
		}
		modifier = {
			factor = 1.25
			development = 30
		}
		modifier = {
			factor = 0.5
			FROM = { NOT = { treasury = 300 } }
		}
		modifier = {
			factor = 1.25
			FROM = { treasury = 400 }
		}
		#Provinces in the Capital Area don't need a courthouse
		modifier = {
			factor = 0
			area_for_scope_province = {
				is_capital_of = FROM
			}
		}
	}
}

DA_government_building_3 = {
	cost = 280
	time = 15
	modifier = {
		local_state_maintenance_modifier = -0.35
		local_autonomy = -0.15
		local_governing_cost = -0.45
		allowed_num_of_buildings = 1
	}
	make_obsolete = town_hall

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15 # Base of 0.01 ducats per MONTH
	}
}
DA_government_building_4 = {
	cost = 560
	time = 18
	modifier = {
		local_state_maintenance_modifier = -0.5
		local_autonomy = -0.2
		local_governing_cost = -0.6
		allowed_num_of_buildings = 1
	}
	make_obsolete = DA_government_building_3

	on_built = {
	}
	on_destroyed = {
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 15  # Base of 0.01 ducats per MONTH
	}
}
################################################
# fort buildings
################################################

fort_15th = {
	cost = 200
	time = 30
	modifier = {
		fort_level = 2
	}

	build_trigger = {
		NOT = { has_terrain = fey_gladeway }
	}

	# THIS = Province, FROM = Builder(not nessecairly owner, can be overlord)
	on_built = {
		if = {
			limit = {
				FROM = { NOT = { mil_tech = 14 } has_government_attribute = on_fort_built_nobles_loyalty }
			}
			FROM = {
				if = {
					limit = {
						has_estate = estate_nobles
					}
					add_estate_loyalty = {
						estate = estate_nobles
						loyalty = 5
					}
				}
				if = {
					limit = {
						has_estate = estate_maratha
					}
					add_estate_loyalty = {
						estate = estate_maratha
						loyalty = 5
					}
				}
				if = {
					limit = {
						has_estate = estate_rajput
					}
					add_estate_loyalty = {
						estate = estate_rajput
						loyalty = 5
					}
				}
				#Anbennar
				if = {
					limit = {
						has_estate = estate_eunuchs_anb
					}
					add_estate_loyalty = {
						estate = estate_eunuchs_anb
						loyalty = 5
					}
				}
				if = {
					limit = {
						has_estate = estate_uppercastes
					}
					add_estate_loyalty = {
						estate = estate_uppercastes
						loyalty = 5
					}
				}
				if = {
					limit = {
						has_estate = estate_ajgriijarul
					}
					add_estate_loyalty = {
						estate = estate_ajgriijarul
						loyalty = 5
					}
				}
			}
		}
		if = { #1.35
			limit = {
				owner = {
					has_estate_privilege = estate_nobles_development_of_castles
				}
				NOT = { has_province_modifier = estate_nobles_development_of_castles_mod }
			}
			add_province_modifier = {
				name = estate_nobles_development_of_castles_mod
				duration = -1
			}
		}
		#ANBENNAR - windward stuff
		if = {
			limit = {
				region = alecand_region
			}
			hidden_effect = {
				province_event = { id = kheionai.2 }
			}
		}
		if = {
			limit = { FROM = { has_estate_privilege = estate_elephant_command_war_room_rights } }
			FROM = { add_legitimacy = 1 }
		}
		if = {
			limit = { FROM = { has_government_attribute = command_elephant_elevation_modifier } }
			add_province_modifier = {
				name = command_elephant_fort_buff
				duration = -1
			}
		}
		#Anbennar
		FROM = {
			if = {
				limit = {
					religion = winter_court
				}
				add_church_power = 10
			}
		}

		owner = { accretive_path_xiaken_chi_stacking_effect = { amount = 40 } }
		owner = { accretive_path_naamjyut_chi_stacking_effect = { amount = 40 } }

		#Anbennar
		
		#Anbennar
		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 2 }

		
		#Anbennar - Brrtekuh
		if = {
			limit = {
				has_building = mage_tower
				owner = {
					OR = {
						has_estate_privilege = estate_church_U10_purification_posts_along_the_sorrow
						has_country_modifier = U10_exorcist_combine
					}
				}
			}
			add_province_modifier = {
				name = U10_containment_array
				duration = -1
			}
		}
		 if = {
			limit = { owner = { has_country_modifier = organized_aid } }
			add_devastation = -5
			every_neighbor_province = { 
				limit = { owned_by = FROM }
				add_devastation = -5
			}	
		}
		spirit_fort_awakening_effect = yes
		if = { #No double forts for you
			limit = {
				OR = {
					has_building = fort_16th
					has_building = fort_17th
					has_building = fort_18th
				}
			}
			remove_building = fort_15th
		}
	}

	# THIS = Province, FROM = Destroyer, Will not be called on buildings made obsolete!
	on_destroyed = {
		if = {
			limit = { has_province_modifier = U10_containment_array }
			remove_province_modifier = U10_containment_array
		}
		#ANBENNAR - windward stuff
		if = {
			limit = {
				region = alecand_region
			}
			hidden_effect = {
				province_event = { id = kheionai.2 }
			}
		}

		if = { #1.35
			limit = {
				has_province_modifier = estate_nobles_development_of_castles_mod
			}
			remove_province_modifier = estate_nobles_development_of_castles_mod
		}
		if = { # Anbennar Kobold Traps
			limit = { has_province_flag = has_kobold_traps }
			province_event = { id = kobold_traps.8 }
		}
		remove_province_modifier = command_elephant_fort_buff
	}

	# THIS = Province, FROM = Destroyer, Will not be called on buildings destroyed!
	on_obsolete = {
		gronstunad_building_authority_effect = { value = -2 }
	}

	onmap = yes
	influencing_fort = yes

	ai_will_do = {
		factor = 1 #Lots of logic in code instead, that multiplies with this value

		#Anbennar
		modifier = {
			factor = 100
			OR = {
				has_terrain = dwarven_hold
				has_terrain = dwarven_hold_surface
			}
		}
		modifier = {	#Exploiting Ynnic chokepoints
			factor = 100
			OR = {
				has_province_modifier = ynnic_dam_modifier
				has_province_flag = prov_ruin_cliff_passage
			}
		}
	}
}
fort_16th = {
	cost = 400
	time = 30
	make_obsolete = fort_15th
	modifier = {
		fort_level = 4
	}

	build_trigger = {
		NOT = { has_terrain = fey_gladeway }
	}

	# THIS = Province, FROM = Builder(not nessecairly owner, can be overlord)
	on_built = {
		if = {
			limit = {
				FROM = { NOT = { mil_tech = 19 } has_government_attribute = on_fort_built_nobles_loyalty }
			}
			FROM = {
				if = {
					limit = {
						has_estate = estate_nobles
					}
					add_estate_loyalty = {
						estate = estate_nobles
						loyalty = 5
					}
				}
				if = {
					limit = {
						has_estate = estate_maratha
					}
					add_estate_loyalty = {
						estate = estate_maratha
						loyalty = 5
					}
				}
				if = {
					limit = {
						has_estate = estate_rajput
					}
					add_estate_loyalty = {
						estate = estate_rajput
						loyalty = 5
					}
				}
			}
		}

		if = { #1.35
			limit = {
				owner = {
					has_estate_privilege = estate_nobles_development_of_castles
				}
				NOT = { has_province_modifier = estate_nobles_development_of_castles_mod }
			}
			add_province_modifier = {
				name = estate_nobles_development_of_castles_mod
				duration = -1
			}
		}

		#ANBENNAR - windward stuff
		if = {
			limit = {
				region = alecand_region
			}
			hidden_effect = {
				province_event = { id = kheionai.2 }
			}
		}
		if = {
			limit = { FROM = { has_estate_privilege = estate_elephant_command_war_room_rights } }
			FROM = { add_legitimacy = 1 }
		}
		if = {
			limit = { FROM = { has_government_attribute = command_elephant_elevation_modifier } }
			add_province_modifier = {
				name = command_elephant_fort_buff
				duration = -1
			}
		}
		
		#Anbennar
		FROM = {
			if = {
				limit = {
					religion = winter_court
				}
				add_church_power = 10
			}
		}
		#Anbennar

		owner = { accretive_path_xiaken_chi_stacking_effect = { amount = 40 } }
		owner = { accretive_path_naamjyut_chi_stacking_effect = { amount = 40 } }

		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 4 }
		spirit_fort_awakening_effect = yes
		#Anbennar - Brrtekuh
		if = {
			limit = {
				has_building = mage_tower
				owner = {
					OR = {
						has_estate_privilege = estate_church_U10_purification_posts_along_the_sorrow
						has_country_modifier = U10_exorcist_combine
					}
				}
			}
			add_province_modifier = {
				name = U10_containment_array
				duration = -1
			}
		}
		 if = {
			limit = { owner = { has_country_modifier = organized_aid } }
			add_devastation = -5
			every_neighbor_province = { 
				limit = { owned_by = FROM }
				add_devastation = -5
			}	
		}
		if = { #No double forts for you
			limit = {
				OR = {
					has_building = fort_17th
					has_building = fort_18th
				}
			}
			remove_building = fort_16th
			remove_building = fort_15th
		}
	}

	# THIS = Province, FROM = Destroyer, Will not be called on buildings made obsolete!
	on_destroyed = {
		if = {
			limit = { has_province_modifier = U10_containment_array }
			remove_province_modifier = U10_containment_array
		}
		#ANBENNAR - windward stuff
		if = {
			limit = {
				region = alecand_region
			}
			hidden_effect = {
				province_event = { id = kheionai.2 }
			}
		}
		remove_province_modifier = command_elephant_fort_buff
		if = { # Anbennar Kobold Traps
			limit = { has_province_flag = has_kobold_traps }
			province_event = { id = kobold_traps.8 }
		}			
	}

	# THIS = Province, FROM = Destroyer, Will not be called on buildings destroyed!
	on_obsolete = {
		if = { #1.35
			limit = {
				has_province_modifier = estate_nobles_development_of_castles_mod
			}
			remove_province_modifier = estate_nobles_development_of_castles_mod
		}

		gronstunad_building_authority_effect = { value = -4 }
	}

	onmap = yes

	influencing_fort = yes

	ai_will_do = {
		factor = 1 #Lots of logic in code instead, that multiplies with this value

		#Anbennar
		modifier = {
			factor = 100
			OR = {
				has_terrain = dwarven_hold
				has_terrain = dwarven_hold_surface
			}
		}
		modifier = {	#Exploiting Ynnic chokepoints
			factor = 100
			OR = {
				has_province_modifier = ynnic_dam_modifier
				has_province_flag = prov_ruin_cliff_passage
			}
		}
	}
}

fort_17th = {
	cost = 600
	time = 30

	make_obsolete = fort_16th

	modifier = {
		fort_level = 6
	}

	build_trigger = {
		NOT = { has_terrain = fey_gladeway }
	}

	# THIS = Province, FROM = Builder(not nessecairly owner, can be overlord)
	on_built = {
		if = {
			limit = {
				FROM = { NOT = { mil_tech = 19 } has_government_attribute = on_fort_built_nobles_loyalty }
			}
			FROM = {
				if = {
					limit = {
						has_estate = estate_nobles
					}
					add_estate_loyalty = {
						estate = estate_nobles
						loyalty = 5
					}
				}
				if = {
					limit = {
						has_estate = estate_maratha
					}
					add_estate_loyalty = {
						estate = estate_maratha
						loyalty = 5
					}
				}
				if = {
					limit = {
						has_estate = estate_rajput
					}
					add_estate_loyalty = {
						estate = estate_rajput
						loyalty = 5
					}
				}
			}
		}

		if = { #1.35
			limit = {
				owner = {
					has_estate_privilege = estate_nobles_development_of_castles
				}
				NOT = { has_province_modifier = estate_nobles_development_of_castles_mod }
			}
			add_province_modifier = {
				name = estate_nobles_development_of_castles_mod
				duration = -1
			}
		}

		#Anbennar
		FROM = {
			if = {
				limit = {
					religion = winter_court
				}
				add_church_power = 10
			}
		}
		#ANBENNAR - windward stuff
		if = {
			limit = {
				region = alecand_region
			}
			hidden_effect = {
				province_event = { id = kheionai.2 }
			}
		}
		if = {
			limit = { FROM = { has_estate_privilege = estate_elephant_command_war_room_rights } }
			FROM = { add_legitimacy = 1 }
		}
		if = {
			limit = { FROM = { has_government_attribute = command_elephant_elevation_modifier } }
			add_province_modifier = {
				name = command_elephant_fort_buff
				duration = -1
			}
		}
		#Anbennar

		owner = { accretive_path_xiaken_chi_stacking_effect = { amount = 40 } }
		owner = { accretive_path_naamjyut_chi_stacking_effect = { amount = 40 } }

		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 6 }
		spirit_fort_awakening_effect = yes
		#Anbennar - Brrtekuh
		if = {
			limit = {
				has_building = mage_tower
				owner = {
					OR = {
						has_estate_privilege = estate_church_U10_purification_posts_along_the_sorrow
						has_country_modifier = U10_exorcist_combine
					}
				}
			}
			add_province_modifier = {
				name = U10_containment_array
				duration = -1
			}
		}
		 if = {
			limit = { owner = { has_country_modifier = organized_aid } }
			add_devastation = -5
			every_neighbor_province = { 
				limit = { owned_by = FROM }
				add_devastation = -5
			}	
		}
		if = { #No double forts for you
			limit = {
				has_building = fort_18th
			}
			remove_building = fort_17th
			remove_building = fort_16th
			remove_building = fort_15th
		}
	}

	# THIS = Province, FROM = Destroyer, Will not be called on buildings made obsolete!
	on_destroyed = {
		if = {
			limit = { has_province_modifier = U10_containment_array }
			remove_province_modifier = U10_containment_array
		}
		#ANBENNAR - windward stuff
		if = {
			limit = {
				region = alecand_region
			}
			hidden_effect = {
				province_event = { id = kheionai.2 }
			}
		}
		remove_province_modifier = command_elephant_fort_buff

		if = { #1.35
			limit = {
				has_province_modifier = estate_nobles_development_of_castles_mod
			}
			remove_province_modifier = estate_nobles_development_of_castles_mod
		}
		if = { # Anbennar Kobold Traps
			limit = { has_province_flag = has_kobold_traps }
			province_event = { id = kobold_traps.8 }
		}		
	}

	# THIS = Province, FROM = Destroyer, Will not be called on buildings destroyed!
	on_obsolete = {
		gronstunad_building_authority_effect = { value = -6 }
	}

	onmap = yes

	influencing_fort = yes

	ai_will_do = {
		factor = 1 #Lots of logic in code instead, that multiplies with this value

		#Anbennar
		modifier = {
			factor = 3
			OR = {
				has_terrain = dwarven_hold
				has_terrain = dwarven_hold_surface
			}
		}
		modifier = {	#Exploiting Ynnic chokepoints
			factor = 3
			OR = {
				has_province_modifier = ynnic_dam_modifier
				has_province_flag = prov_ruin_cliff_passage
			}
		}
	}
}

fort_18th = {
	cost = 800
	time = 30


	make_obsolete = fort_17th

	modifier = {
		fort_level = 8
	}

	build_trigger = {
		NOT = { has_terrain = fey_gladeway }
	}

	# THIS = Province, FROM = Builder(not nessecairly owner, can be overlord)
	on_built = {
		if = {
			limit = {
				FROM = { has_government_attribute = on_fort_built_nobles_loyalty }
			}
			FROM = {
				if = {
					limit = {
						has_estate = estate_nobles
					}
					add_estate_loyalty = {
						estate = estate_nobles
						loyalty = 5
					}
				}
				if = {
					limit = {
						has_estate = estate_maratha
					}
					add_estate_loyalty = {
						estate = estate_maratha
						loyalty = 5
					}
				}
				if = {
					limit = {
						has_estate = estate_rajput
					}
					add_estate_loyalty = {
						estate = estate_rajput
						loyalty = 5
					}
				}
			}
		}

		if = { #1.35
			limit = {
				owner = {
					has_estate_privilege = estate_nobles_development_of_castles
				}
				NOT = { has_province_modifier = estate_nobles_development_of_castles_mod }
			}
			add_province_modifier = {
				name = estate_nobles_development_of_castles_mod
				duration = -1
			}
		}

		#ANBENNAR - windward stuff
		if = {
			limit = {
				region = alecand_region
			}
			hidden_effect = {
				province_event = { id = kheionai.2 }
			}
		}
		#Anbennar
		FROM = {
			if = {
				limit = {
					religion = winter_court
				}
				add_church_power = 10
			}
		}
		if = {
			limit = { FROM = { has_estate_privilege = estate_elephant_command_war_room_rights } }
			FROM = { add_legitimacy = 1 }
		}
		if = {
			limit = { FROM = { has_government_attribute = command_elephant_elevation_modifier } }
			add_province_modifier = {
				name = command_elephant_fort_buff
				duration = -1
			}
		}
		#Anbennar

		owner = { accretive_path_xiaken_chi_stacking_effect = { amount = 40 } }
		owner = { accretive_path_naamjyut_chi_stacking_effect = { amount = 40 } }

		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 8 }
		spirit_fort_awakening_effect = yes
		#Anbennar - Brrtekuh
		if = {
			limit = {
				has_building = mage_tower
				owner = {
					OR = {
						has_estate_privilege = estate_church_U10_purification_posts_along_the_sorrow
						has_country_modifier = U10_exorcist_combine
					}
				}
			}
			add_province_modifier = {
				name = U10_containment_array
				duration = -1
			}
		}
		 if = {
			limit = { owner = { has_country_modifier = organized_aid } }
			add_devastation = -5
			every_neighbor_province = { 
				limit = { owned_by = FROM }
				add_devastation = -5
			}	
		}
	}

	# THIS = Province, FROM = Destroyer, Will not be called on buildings made obsolete!
	on_destroyed = {
		if = {
			limit = { has_province_modifier = U10_containment_array }
			remove_province_modifier = U10_containment_array
		}
		if = { #1.35
			limit = {
				has_province_modifier = estate_nobles_development_of_castles_mod
			}
			remove_province_modifier = estate_nobles_development_of_castles_mod
		}
		#ANBENNAR - windward stuff
		if = {
			limit = {
				region = alecand_region
			}
			hidden_effect = {
				province_event = { id = kheionai.2 }
			}
		}
		if = { # Anbennar Kobold Traps
			limit = { has_province_flag = has_kobold_traps }
			province_event = { id = kobold_traps.8 }
		}		
		remove_province_modifier = command_elephant_fort_buff
	}

	# THIS = Province, FROM = Destroyer, Will not be called on buildings destroyed!
	on_obsolete = {
	}

	onmap = yes

	influencing_fort = yes

	ai_will_do = {
		factor = 1 #Lots of logic in code instead, that multiplies with this value
	}
}
################################################
# manufactories buildings
################################################

DA_tax_office_manufactory = {

	manufactory = {
		all
	}

	build_trigger = {
	}

	bonus_manufactory = {
		paper
	}
	modifier = {
		tax_income = 6
	}
	bonus_modifier = {
		tax_income = 3
	}

	onmap = no
	show_separate = yes # Means as a manufactory it will be shown according to the old way
	on_built = {
		#Anbennar
		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 5 }
    }
	on_construction_started = { } #Fires when you start the construction,  ROOT - Province FROM - Country that started 1.35
	on_construction_canceled = { } #Fires when you cancel the construction, ROOT - Province FROM - Country that canceled 1.25

	ai_will_do = {
		factor = 0
	}
}
mage_tower = {
	manufactory = {
		all
	}
	build_trigger = {
		DA_Province_has_arcane_power_or_higher = yes
		OR = {
			OR = {
				FROM = { NOT = { has_country_flag = banned_magic } }
				FROM = { is_subject_of = Y63 }
			}
			FROM = { has_country_modifier = command_the_korashi_secret }
		}
	}

	bonus_manufactory = { # Will apply an extra modifier if these goods
		damestear
		precursor_relics
		incense
		chinaware
		ivory
	}

	modifier = {
		local_development_cost = -0.1
		local_hostile_attrition = 1
	}
	bonus_modifier = {
		local_development_cost = -0.1
		local_hostile_attrition = 1
	}
	onmap = no
	show_separate = yes # Means as a manufactory it will be shown according to the old way

	ai_will_do = {
		factor = 1
	}
	on_built = {
		if = {
			limit = {
				area = castonath_area
			}
			set_province_flag = latest_manufactory_built_is_mage_tower
			clr_province_flag = latest_manufactory_built_is_farm_estate
			clr_province_flag = latest_manufactory_built_is_ramparts
			clr_province_flag = latest_manufactory_built_is_impressment_offices
			clr_province_flag = latest_manufactory_built_is_wharf
			clr_province_flag = latest_manufactory_built_is_textile
			clr_province_flag = latest_manufactory_built_is_weapons
			clr_province_flag = latest_manufactory_built_is_state_house
			clr_province_flag = latest_manufactory_built_is_plantations
			clr_province_flag = latest_manufactory_built_is_tradecompany
			clr_province_flag = latest_manufactory_built_is_soldiers_households
			clr_province_flag = latest_manufactory_built_is_mills
			clr_province_flag = latest_manufactory_built_is_furnace
		}
		if = {
			limit = {
				region = alecand_region
			}
			hidden_effect = {
				province_event = { id = kheionai.3 }
			}
		}
		#Anbennar - Thangoya Tier 2 Reform Mechanic, Feel Free To Reuse
		if = {
			limit = { FROM = { has_reform = kai_diligent_bureucracy } }
			anb_manufactory_discount = yes
		}
		anbennar_building_effect = yes
		#Anbennar - Irkorzik
		if = {
			limit = { 
				owner = { has_estate_privilege = estate_church_sandstorm_summoning }
				owner = { has_country_flag = irkorzik_sandstorm_summoning_buff }
			}
			add_province_modifier = { name = irkorzik_sandstorm_summoning_buff duration = -1 }
		}
		else_if = {
			limit = { 
				owner = { has_estate_privilege = estate_church_sandstorm_summoning }
			}
			add_province_modifier = { name = irkorzik_sandstorm_summoning duration = -1 }
		}
		#Anbennar - Irkorzik, but can be used by anyone. Feel free to use.
		anb_add_extra_mage_tower_dev = yes

		gronstunad_building_authority_effect = { value = 1 }

		on_built_manufactory_effect = yes

		#Anbennar - Brrtekuh
		if = {
			limit = {
				has_fort_building_trigger = yes
				owner = {
					OR = {
						has_estate_privilege = estate_church_U10_purification_posts_along_the_sorrow
						has_country_modifier = U10_exorcist_combine
					}
				}
			}
			add_province_modifier = {
				name = U10_containment_array
				duration = -1
			}
		}

		#Anbennar - Masked Butcher
		if = {
			limit = {
				owner = { has_country_flag = mb_ichortap_flag }
				NOT = { owner = { has_country_flag = mb_buffed_ichortap_flag } }
				superregion = deepwoods_superregion
			}
			add_province_modifier = {
				name = mb_ichortap
				duration = -1
			}
		}
		else_if = {
			limit = {
				owner = { has_country_flag = mb_buffed_ichortap_flag }
				superregion = deepwoods_superregion
			}
			add_province_modifier = {
				name = mb_ichortap2
				duration = -1
			}
		}

		#Rezankand
		if = {
			limit = {
				owner = { 
					mission_completed = rezankand_architects_of_the_future 
					mission_completed = rezankand_faster_than_thought 
				}
			}
			add_province_modifier = {
				name = rezankand_light_matrix_upgraded
				duration = -1
			}
		}
		else_if = {
			limit = {
				owner = { 
					mission_completed = rezankand_architects_of_the_future 
				}
			}
			add_province_modifier = {
				name = rezankand_light_matrix
				duration = -1
			}
		}
		#Toarnaire
		if = {
			limit = {
				province_id = 33 owner = { mission_completed = toarnaire_mageblood }
			}
			add_province_modifier = {
				name = toarnaire_toarnaire_mage_tower
				duration =  -1
			}
		}
		# DK
		province_event = {
			id = DA_building_event.40
		}
	}
	on_destroyed = {
		if = {
			limit = { has_province_modifier = U10_containment_array }
			remove_province_modifier = U10_containment_array
		}
		# DK
		remove_province_modifier = DA_Mage_Tower_Specialization.Abjuration
		remove_province_modifier = DA_Mage_Tower_Specialization.Divination
		remove_province_modifier = DA_Mage_Tower_Specialization.Illusion
		remove_province_modifier = DA_Mage_Tower_Specialization.Conjuration
		remove_province_modifier = DA_Mage_Tower_Specialization.Enchantment
		remove_province_modifier = DA_Mage_Tower_Specialization.Evocation
		remove_province_modifier = DA_Mage_Tower_Specialization.Transmutation
		remove_province_modifier = DA_Mage_Tower_Specialization.Necromancy
		remove_province_modifier = DA_Mage_Tower_Specialization.Elemental_Magic_Fire
		remove_province_modifier = DA_Mage_Tower_Specialization.Elemental_Magic_Water
		remove_province_modifier = DA_Mage_Tower_Specialization.Elemental_Magic_Earth
		remove_province_modifier = DA_Mage_Tower_Specialization.Elemental_Magic_Air
		if = {
			limit = { has_province_modifier = U10_containment_array }
			remove_province_modifier = U10_containment_array
		}
		if = {
			limit = {
				region = alecand_region
			}
			hidden_effect = {
				province_event = { id = kheionai.3 }
			}
		}
		if = {
			limit = { FROM = { has_reform = kai_diligent_bureucracy } }
			anb_manufactory_discount_remove = yes
		}
		anbennar_building_effect = yes
		#Anbennar - Irkorzik
		if = {
			limit = { 
				owner = { has_estate_privilege = estate_church_sandstorm_summoning } 
				owner = { has_country_flag = irkorzik_upgraded_sandstorm_summoning }
				has_province_modifier = irkorzik_sandstorm_summoning_buff
			}
			remove_province_modifier = irkorzik_sandstorm_summoning_buff
		}
		else_if = {
			limit = { 
				owner = { has_estate_privilege = estate_church_sandstorm_summoning } 
				has_province_modifier = irkorzik_sandstorm_summoning
			}
			remove_province_modifier = irkorzik_sandstorm_summoning
		}
		#Anbennar - Irkorzik, but can be used by anyone. Feel free to use
		anb_remove_extra_mage_tower_dev = yes

		#Anbennar - Masked Butcher
		if = {
			limit = { has_province_modifier = mb_ichortap }
			remove_province_modifier = mb_ichortap
		}
		if = {
			limit = { has_province_modifier = mb_ichortap2 }
			remove_province_modifier = mb_ichortap2
		}

		#Rezankand
		if = {
			limit = {
				OR = {
					has_province_modifier = rezankand_light_matrix
					has_province_modifier = rezankand_light_matrix_upgraded
				}
			}
			remove_province_modifier = rezankand_light_matrix
			remove_province_modifier = rezankand_light_matrix_upgraded
		}

		if = {
			limit = {
				OR = {
					has_province_modifier = rezankand_light_matrix_supply
					has_province_modifier = rezankand_light_matrix_supply_upgraded
					has_province_modifier = rezankand_light_matrix_logistic
					has_province_modifier = rezankand_light_matrix_logistic_upgraded
				}
			}
			remove_province_modifier = rezankand_light_matrix_supply
			remove_province_modifier = rezankand_light_matrix_supply_upgraded
			remove_province_modifier = rezankand_light_matrix_logistic
			remove_province_modifier = rezankand_light_matrix_logistic_upgraded
			every_neighbor_province = {
				limit = {
					owned_by = FROM
					NOT = {
						any_neighbor_province = {
							owned_by = FROM
							has_building = mage_tower
						}
					}
				}
				remove_province_modifier = rezankand_light_matrix_supply
				remove_province_modifier = rezankand_light_matrix_supply_upgraded
				remove_province_modifier = rezankand_light_matrix_logistic
				remove_province_modifier = rezankand_light_matrix_logistic_upgraded
			}
		}
		#Toarnaire
		if = {
			limit = {
				province_id = 33 owner = { mission_completed = toarnaire_mageblood }
			}
			remove_province_modifier = toarnaire_toarnaire_mage_tower
		}
	}
}


ramparts = {
	manufactory = {
		all
	}
	modifier = {
		local_hostile_attrition = 1
		local_defensiveness = 0.15
		local_defender_dice_roll_bonus = 1
	}
	onmap = no
	show_separate = yes # Means as a manufactory it will be shown according to the old way


	on_built = {
		add_dev_from_building = { #1.35
			building = manufactory 
			type = manpower 
			value = 1 
		}
		if = {
			limit = {
				owner = {
					has_estate_privilege = estate_nobles_development_of_castles
				}
				NOT = { has_province_modifier = estate_nobles_development_of_castles_ramparts_mod }
			}
			add_province_modifier = {
				name = estate_nobles_development_of_castles_ramparts_mod
				duration = -1
			}
		}
		# ANBENNAR
		if = {
			limit = {
				area = castonath_area
			}
			set_province_flag = latest_manufactory_built_is_ramparts
			clr_province_flag = latest_manufactory_built_is_farm_estate
			clr_province_flag = latest_manufactory_built_is_impressment_offices
			clr_province_flag = latest_manufactory_built_is_wharf
			clr_province_flag = latest_manufactory_built_is_textile
			clr_province_flag = latest_manufactory_built_is_weapons
			clr_province_flag = latest_manufactory_built_is_state_house
			clr_province_flag = latest_manufactory_built_is_plantations
			clr_province_flag = latest_manufactory_built_is_tradecompany
			clr_province_flag = latest_manufactory_built_is_soldiers_households
			clr_province_flag = latest_manufactory_built_is_mills
			clr_province_flag = latest_manufactory_built_is_furnace
			clr_province_flag = latest_manufactory_built_is_mage_tower
		}
		#Anbennar - Thangoya Tier 2 Reform Mechanic, Feel Free To Reuse
		if = {
			limit = { FROM = { has_reform = kai_diligent_bureucracy } }
			anb_manufactory_discount = yes
		}
		#Anbennar
		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 5 }

		on_built_manufactory_effect = yes
	}

	on_destroyed = { #1.35
		remove_dev_from_building = {
			building = manufactory 
			type = manpower 
			value = 1
		}
		if = {
			limit = {
				has_province_modifier = estate_nobles_development_of_castles_ramparts_mod
			}
			remove_province_modifier = estate_nobles_development_of_castles_ramparts_mod
		}
		if = {
			limit = { FROM = { has_reform = kai_diligent_bureucracy } }
			anb_manufactory_discount_remove = yes
		}
	}


	ai_will_do = {
		factor = 1
		modifier = {
			factor = 0
			from = { num_of_loans = 3 }
		}
		modifier = {
			factor = 20
			has_terrain = mountain
		}
		modifier = {
			factor = 0
			from = { personality = ai_militarist }
		}
	}
}


soldier_households = {
	manufactory = {
		all
	}

	bonus_manufactory = { # Will apply an extra modifier if these goods
		grain
		fish
		livestock
		wine
		fungi
		serpentbloom
	}

	modifier = {
		local_manpower = 0.75
	}
	bonus_modifier = {
		local_manpower = 0.75
	}
	onmap = no
	show_separate = yes # Means as a manufactory it will be shown according to the old way

	on_built = {
		add_development_from_building = {
			building = manufactory
			type = production
			value = 2
		}
		add_dev_from_building = { #1.35
			building = manufactory 
			type = manpower 
			value = 1 
		}
		if = { #1.35
			limit = {
				FROM = {
					has_government_attribute = improved_military_buildings
				}
			}
			add_province_modifier = {
				name = wei_suo_system_reform_soldier_households_modifier
				duration = -1
			}
		}
		# ANBENNAR
		if = {
			limit = {
				area = castonath_area
			}
			set_province_flag = latest_manufactory_built_is_soldiers_households
			clr_province_flag = latest_manufactory_built_is_farm_estate
			clr_province_flag = latest_manufactory_built_is_ramparts
			clr_province_flag = latest_manufactory_built_is_impressment_offices
			clr_province_flag = latest_manufactory_built_is_wharf
			clr_province_flag = latest_manufactory_built_is_textile
			clr_province_flag = latest_manufactory_built_is_weapons
			clr_province_flag = latest_manufactory_built_is_state_house
			clr_province_flag = latest_manufactory_built_is_plantations
			clr_province_flag = latest_manufactory_built_is_tradecompany
			clr_province_flag = latest_manufactory_built_is_mills
			clr_province_flag = latest_manufactory_built_is_furnace
			clr_province_flag = latest_manufactory_built_is_mage_tower
		}
		#Anbennar - Thangoya Tier 2 Reform Mechanic, Feel Free To Reuse
		if = {
			limit = { FROM = { has_reform = kai_diligent_bureucracy } }
			anb_manufactory_discount = yes
		}
		#Anbennar
		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 5 }

		on_built_manufactory_effect = yes

		if = {
			limit = { FROM = { mission_completed = R38_raheni_regiments } }
			add_province_modifier = { name = bhuvauri_adasa_workforce duration = -1 desc = while_soldier_households }
		}

		#Rakkaz MT 
		if ={
			limit = { FROM = { has_country_flag = rakkaz_soldiers_households_bonus } }
			rakkaz_soldier_household_buffs = yes
		}

		#Drozma Tur
		if = {
			limit = {
				FROM = {
					religion = drozma_tur
					has_church_aspect = aspire_power_aspect_dip
				}
			}
			add_base_manpower = 2
			FROM = {
				add_church_power = 10
			}
		}
	}

	on_destroyed = {
		remove_development_from_building = {
			building = manufactory
			type = production
			value = 2
		}
		remove_dev_from_building = { #1.35
			building = manufactory 
			type = manpower 
			value = 1
		}
		if = { #1.35
			limit = {
				has_province_modifier = wei_suo_system_reform_soldier_households_modifier
			}
			remove_province_modifier = wei_suo_system_reform_soldier_households_modifier
		}
		if = {
			limit = { FROM = { has_reform = kai_diligent_bureucracy } }
			anb_manufactory_discount_remove = yes
		}
		if = {
            limit = { has_province_modifier = bhuvauri_adasa_workforce }
            remove_province_modifier = bhuvauri_adasa_workforce
        }
		if = {
            limit = { has_province_modifier = rakkaz_soldier_households_1 }
            remove_province_modifier = rakkaz_soldier_households_1
        }
		if = {
            limit = { has_province_modifier = rakkaz_soldier_households_2 }
            remove_province_modifier = rakkaz_soldier_households_2
        }
		if = {
            limit = { has_province_modifier = rakkaz_soldier_households_3 }
            remove_province_modifier = rakkaz_soldier_households_3
        }

		#Drozma Tur
		if = {
			limit = {
				FROM = {
					religion = drozma_tur
					has_church_aspect = aspire_power_aspect_dip
				}
			}
			add_base_manpower = -2
			FROM = {
				add_church_power = -10
			}
		}
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 1
	}
}

impressment_offices = {
	manufactory = {
		all
	}

	bonus_manufactory = { # Will apply an extra modifier if these goods
		salt
		fish
		naval_supplies
		tropical_wood
	}

	build_trigger = {
		has_port = yes
	}

	modifier = {
		local_sailors = 250
		ship_recruit_speed = -0.1
		local_ship_cost = -0.05
	}
	bonus_modifier = {
		local_sailors = 250
		ship_recruit_speed = -0.1
		local_ship_cost = -0.05
	}
	onmap = no
	show_separate = yes # Means as a manufactory it will be shown according to the old way

	on_built = {
		add_development_from_building = {
			building = impressment_offices
			type = manpower
			value = 2
		}
		add_dev_from_building = { #1.35
			building = impressment_offices 
			type = manpower 
			value = 1 
		}
		#Anbennar - Exwes
		on_province_impressment_offices_manufactory_built_estate_privileges_effect = yes
		# ANBENNAR
		if = {
			limit = {
				area = castonath_area
			}
			set_province_flag = latest_manufactory_built_is_impressment_offices
			clr_province_flag = latest_manufactory_built_is_farm_estate
			clr_province_flag = latest_manufactory_built_is_ramparts
			clr_province_flag = latest_manufactory_built_is_wharf
			clr_province_flag = latest_manufactory_built_is_textile
			clr_province_flag = latest_manufactory_built_is_weapons
			clr_province_flag = latest_manufactory_built_is_state_house
			clr_province_flag = latest_manufactory_built_is_plantations
			clr_province_flag = latest_manufactory_built_is_tradecompany
			clr_province_flag = latest_manufactory_built_is_soldiers_households
			clr_province_flag = latest_manufactory_built_is_mills
			clr_province_flag = latest_manufactory_built_is_furnace
			clr_province_flag = latest_manufactory_built_is_mage_tower
		}
		#Anbennar - Thangoya Tier 2 Reform Mechanic, Feel Free To Reuse
		if = {
			limit = { FROM = { has_reform = kai_diligent_bureucracy } }
			anb_manufactory_discount = yes
		}
		#Anbennar
		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 5 }

		on_built_manufactory_effect = yes
	}
	on_destroyed = {
		remove_development_from_building = {
			building = impressment_offices
			type = manpower
			value = 2
		}
		remove_dev_from_building = { #1.35
			building = impressment_offices 
			type = manpower 
			value = 1 
		}
		#Anbennar - Exwes
		on_province_impressment_offices_manufactory_destroyed_estate_privileges_effect = yes
		
		if = {
			limit = { FROM = { has_reform = kai_diligent_bureucracy } }
			anb_manufactory_discount_remove = yes
		}
		if = { #themarenn
			limit = { FROM = { has_country_flag = inland_impressment_offices } }
			remove_province_modifier = a95_tier1_sailors
			remove_province_modifier = a95_tier2_sailors
		}
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 1
	}
}

state_house = {
	manufactory = {
		all
	}

	bonus_manufactory = { # Will apply an extra modifier if these goods
		paper
		glass
		gems
	}

	build_trigger = {
		NOT = {
			area_for_scope_province = {
				owner = {
					tag = ROOT
				}
				OR = {
					has_building = state_house
					has_construction = state_house
				}
			}
		}
	}

	keep_trigger = {
		NOT = {
			area_for_scope_province = {
				NOT = { province_id = root }
				owner = {
					tag = ROOT
				}
				OR = {
					has_building = state_house
					has_construction = state_house
				}
			}
		}
	}

	modifier = {
		statewide_governing_cost = -0.2
		min_local_autonomy = -5
		local_governing_cost = -0.15
		local_governing_cost_increase = -10
		allowed_num_of_buildings = 1
	}
	bonus_modifier = {
		statewide_governing_cost = -0.2
		min_local_autonomy = -5
		local_governing_cost = -0.15
		local_governing_cost_increase = -10
	}
	onmap = no
	show_separate = yes # Means as a manufactory it will be shown according to the old way

	on_built = {
		add_development_from_building = {
			building = state_house
			type = tax
			value = 2
		}
		# ANBENNAR
		if = {
			limit = {
				area = castonath_area
			}
			set_province_flag = latest_manufactory_built_is_state_house
			clr_province_flag = latest_manufactory_built_is_farm_estate
			clr_province_flag = latest_manufactory_built_is_ramparts
			clr_province_flag = latest_manufactory_built_is_impressment_offices
			clr_province_flag = latest_manufactory_built_is_wharf
			clr_province_flag = latest_manufactory_built_is_textile
			clr_province_flag = latest_manufactory_built_is_weapons
			clr_province_flag = latest_manufactory_built_is_plantations
			clr_province_flag = latest_manufactory_built_is_tradecompany
			clr_province_flag = latest_manufactory_built_is_soldiers_households
			clr_province_flag = latest_manufactory_built_is_mills
			clr_province_flag = latest_manufactory_built_is_furnace
			clr_province_flag = latest_manufactory_built_is_mage_tower
		}
		#Anbennar - Thangoya Tier 2 Reform Mechanic, Feel Free To Reuse
		if = {
			limit = { FROM = { has_reform = kai_diligent_bureucracy } }
			anb_manufactory_discount = yes
		}
		#Anbennar
		anbennar_building_effect = yes

		gronstunad_building_authority_effect = { value = 5 }

		on_built_manufactory_effect = yes
	}
	on_destroyed = {
		remove_development_from_building = {
			building = state_house
			type = tax
			value = 2
		}
		if = {
			limit = { FROM = { has_reform = kai_diligent_bureucracy } }
			anb_manufactory_discount_remove = yes
		}
	}
	on_obsolete = {
	}

	ai_will_do = {
		factor = 1
		#Provinces in the Capital Area don't need a state house
		modifier = {
			factor = 0
			area_for_scope_province = {
				is_capital_of = FROM
			}
		}
	}
}
